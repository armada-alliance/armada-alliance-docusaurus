"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[301],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(a),c=l,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||o;return a?n.createElement(h,r(r({ref:t},u),{},{components:a})):n.createElement(h,r({ref:t},u))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,r=new Array(o);r[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294),l=a(6010);const o={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(o.tabItem,r),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>_});var n=a(7462),l=a(7294),o=a(6010),r=a(2466),i=a(6775),s=a(1980),p=a(7392),u=a(12);function m(e){return function(e){var t;return(null==(t=l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:l}}=e;return{value:t,label:a,attributes:n,default:l}}))}function d(e){const{values:t,children:a}=e;return(0,l.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function c(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,l.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=d(e),[r,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,p]=h({queryString:a,groupId:n}),[m,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,u.Nk)(a);return[n,(0,l.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),f=(()=>{const e=s??m;return c({value:e,tabValues:o})?e:null})();(0,l.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),k(e)}),[p,k,o]),tabValues:o}}var f=a(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,r.o5)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==i&&(m(t),s(n))},c=e=>{var t;let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;a=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;a=u[t]??u[u.length-1];break}}null==(t=a)||t.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:r}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:c,onClick:d},r,{className:(0,o.Z)("tabs__item",y.tabItem,null==r?void 0:r.className,{"tabs__item--active":i===t})}),a??t)})))}function b(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function T(e){const t=k(e);return l.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},l.createElement(g,(0,n.Z)({},e,t)),l.createElement(b,(0,n.Z)({},e,t)))}function _(e){const t=(0,f.Z)();return l.createElement(T,(0,n.Z)({key:String(t)},e))}},387:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var n=a(7462),l=(a(7294),a(3905)),o=a(4866),r=a(5162);const i={description:"How to use the stakepoolscripts to start a pool, rotate KES, update pool data, claim rewards and send transactions."},s="Introduction",p={unversionedId:"stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts",id:"stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts",title:"Introduction",description:"How to use the stakepoolscripts to start a pool, rotate KES, update pool data, claim rewards and send transactions.",source:"@site/docs/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts.mdx",sourceDirName:"stake-pool-guides/pi-pool-tutorial/pi-node-full-guide",slug:"/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts",permalink:"/docs/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts",draft:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts.mdx",tags:[],version:"current",frontMatter:{description:"How to use the stakepoolscripts to start a pool, rotate KES, update pool data, claim rewards and send transactions."},sidebar:"tutorialSidebar",previous:{title:"Pi-Cold",permalink:"/docs/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/cold-offline"},next:{title:"Two testnets, one Pi",permalink:"/docs/stake-pool-guides/two-testnets-one-pi"}},u={},m=[{value:"Workflow",id:"workflow",level:2},{value:"Create and fund a wallet",id:"create-and-fund-a-wallet",level:2},{value:"Create the pool&#39;s keys and certificates",id:"create-the-pools-keys-and-certificates",level:2},{value:"Confirm successful registration",id:"confirm-successful-registration",level:3},{value:"pool.vet",id:"poolvet",level:3},{value:"adapools.org",id:"adapoolsorg",level:3},{value:"pooltool.io",id:"pooltoolio",level:3}],d={toc:m},c="wrapper";function h(e){let{components:t,...i}=e;return(0,l.kt)(c,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Now that everything is set up let's start creating the pool. Please read the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gitmachtl/scripts"},"official documentation")," Martin of ",(0,l.kt)("a",{parentName:"p",href:"https://stakepool.at/"},"ATADA")," pool provides to get a better understanding of the scripts. His tutorial is much more detailed and covers a lot of options. Thank you Martin!"),(0,l.kt)("p",null,"This tutorial on the other hand is for the basics. It contains everything necessary to get a stake pool running and some other fundamental operations. It should help to get a nice and easy workflow."),(0,l.kt)("p",null,"The transfer with the USB device is fully automated. It just needs to be mounted at the current working environment,\nwhich should also work automated.\nIf not, mount it with ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo mount ~/usb_transfer"),". Make sure to unmount every time before removing ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo umount ~/usb_transfer"),". "),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This guide assumes, that you are always in ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/pool_keys")," when running a script on the offline machine and in ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/pi-pool")," on the core.")),(0,l.kt)("h1",{id:"prerequisits-on-the-cold-machine"},"Prerequisits on the cold machine"),(0,l.kt)("p",null,"Let's begin with a directory for your keys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd\nmkdir pool_keys\ncd pool_keys\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Also make sure the offline machine's time is correct, you'll have to do this everytime you use it!")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"timedatectl\ntimedatectl set-time xxxxx\n")),(0,l.kt)("h1",{id:"create-a-stake-pool"},"Create a stake pool"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Basically everything is created offline. Make sure that you never expose your secret keys to an online environment and back them up, multiple times best case. The only keys you need on your core are: kes-xxx.skey, vrf.skey and node-xxx.opcert.")),(0,l.kt)("h2",{id:"workflow"},"Workflow"),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(1726).Z,width:"794",height:"1123"})),(0,l.kt)("h2",{id:"create-and-fund-a-wallet"},"Create and fund a wallet"),(0,l.kt)("p",null,"First of all you'll need a wallet and with it a staking key. Create the keys and name the wallet accordingly."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"03a_genStakingPaymentAddr.sh wallet_name cli\n")))),(0,l.kt)("p",null,"Now copy the addresses to your core to fund the new wallet. You'll need your fresh USB drive for that."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh attach wallet_name.payment.addr\n01_workOffline.sh attach wallet_name.staking.addr\n")))),(0,l.kt)("p",null,"Switch the USB drive from offline to online machine.\nExtract the address files."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh extract\n")))),(0,l.kt)("p",null,"Retrieve the address and send some funds to your new wallet. You'll need at least 502 ADA + tx fees + your pledge."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cat wallet_name.payment.addr\n")))),(0,l.kt)("p",null,"Query the balance and wait until the new UTXO shows up."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_queryAddress.sh wallet_name.payment\n")))),(0,l.kt)("p",null,"When the funds arrived copy the UTXO data to your offline machine. "),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh add wallet_name.payment\n")))),(0,l.kt)("p",null,"Generate a transaction to register the staking address.\nIt will be submitted later on."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"03b_regStakingAddrCert.sh wallet_name.staking \n")))),(0,l.kt)("h2",{id:"create-the-pools-keys-and-certificates"},"Create the pool's keys and certificates"),(0,l.kt)("p",null,"Generate the keys for your core node."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"04a_genNodeKeys.sh pool_name cli\n04b_genVRFKeys.sh pool_name\n04c_genKESKeys.sh pool_name\n04d_genNodeOpCert.sh pool_name\n")))),(0,l.kt)("p",null,"Generate your stakepool certificate and metadata.json."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"05a_genStakepoolCert.sh pool_name\n")))),(0,l.kt)("p",null,"This creates a ",(0,l.kt)("inlineCode",{parentName:"p"},"pool_name.pool.json")," file, which you can edit according to your needs and wishes.\nEverything is calculated in lovelaces. (Reminder: 1 ADA = 1,000,000 lovelace)\nSo in this case we get a pool with 100k ADA pledge, 340 ADA fixed cost (minimum) and 1% margin."),(0,l.kt)("p",null,"Add as many of your relays as you want. Either ip or dns based."),(0,l.kt)("p",null,"Pool description can contain up to 255 characters. "),(0,l.kt)("p",null,"poolMetaUrl points to the Metadata file, which you need to upload later. Github is a popular choice, if you don't want to use your own server.  "),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"poolMetaUrl can only be 64 characters long.\nMake sure it points to the raw file.\nIn case you need to shorten the URL you can do it by creating an empty ",(0,l.kt)("inlineCode",{parentName:"p"},"pool_name.metadata.json"),", upload it\nand shorten the URL. Make sure the short URL doesn't expire. Later replace it with the actual file. ")),(0,l.kt)("p",null,"You may also add an URL to an ",(0,l.kt)("inlineCode",{parentName:"p"},"extended.metadata.json"),", which holds more information like the URL to your logo etc.\nJust create the file on your local machine, it's quite self-explanatory.\nThe png icon is limited to 64x64 while the logo could use 400x400 pixels. jpg works aswell."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"pool_name.pool.json",label:"pool_name.pool.json",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'{\n   "poolName": "pool_name",  \n   "poolOwner": [\n      {\n      "ownerName": "wallet_name",\n      "ownerWitness": "local"\n      }\n   ],\n   "poolRewards": "wallet_name",\n   "poolPledge": "100000000000",    \n   "poolCost": "340000000",\n   "poolMargin": "0.01"\n   "poolRelays": [\n      {\n      "relayType": "dns",\n      "relayEntry": "relay.mypool.com",\n      "relayPort": "3001"\n      }\n      {\n      "relayType": "ip",\n      "relayEntry": "x.x.x.x (ipv4 of relay)",\n      "relayPort": "3002"\n      }\n   ],\n   "poolMetaName": "This is my Pool",\n   "poolMetaDescription": "This is the description of my Pool!",\n   "poolMetaTicker": "POOL",\n   "poolMetaHomepage": "https://mypool.com",\n   "poolMetaUrl": "https://mypool.com/pool_name.metadata.json",\n   "poolExtendedMetaUrl": "",\n   "---": "--- DO NOT EDIT BELOW THIS LINE ---"\n}\n'))),(0,l.kt)(r.Z,{value:"extended.metadata.json",label:"extended.metadata.json",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'{\n    "info": {\n        "url_png_icon_64x64": "",\n        "url_png_logo": "",\n        "location": "",\n        "social": {\n            "twitter_handle": "",\n            "telegram_handle": "",\n            "facebook_handle": "",\n            "youtube_handle": "",\n            "twitch_handle": "",\n            "discord_handle": "",\n            "github_handle": ""\n        },\n        "company": {\n            "name": "",\n            "city": "",\n            "country": ""\n                    },\n        "about": {\n            "me": "",\n            "server": "",\n        "company": ""\n        },\n    "my-pool-ids": {\n        "0": ""\n    },\n    "when-satured-then-recommend": {\n        "0": ""\n    }\n    }\n   \n}\n')))),(0,l.kt)("p",null,"Now run ",(0,l.kt)("inlineCode",{parentName:"p"},"05a_genStakepoolCert.sh pool_name")," again. This will generate the pool_name.pool.cert file and the actual pool_name.metadata.json.\nLater you can upload the metadata.json to the URL you specified in the previous step. Do not edit it anymore or the hash won't fit!\nIf you want to change something, change it in the pool_name.pool.json and run ",(0,l.kt)("inlineCode",{parentName:"p"},"05a_genStakepoolCert.sh pool_name")," again."),(0,l.kt)("p",null,"Delegate to your own pool as owner. (Pledge) "),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"05b_genDelegationCert.sh pool_name wallet_name\n")))),(0,l.kt)("p",null,"Generate the stakepool registration transaction. The script also attaches the new pool_name.metadata.json to the offline transfer file."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"05c_regStakepoolCert.sh pool_name wallet_name.payment\n")))),(0,l.kt)("p",null,"Now attach the files needed by the core."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh attach pool_name.vrf.skey\n01_workOffline.sh attach pool_name.kes-xxx.skey\n01_workOffline.sh attach pool_name.node-xxx.opcert\n")))),(0,l.kt)("p",null,"You are done with the offline part. Unmount and bring your USB drive to the core again."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh extract\n")))),(0,l.kt)("p",null,"For convenience rename the core files so you don't have to change the startup script every KES rotation."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mv pool_name.kes-xxx.skey kes.skey\nmv pool_name.vrf.skey vrf.skey\nmv pool_name.node-xxx.opcert node.cert\n")))),(0,l.kt)("p",null,"Now change the startup script and add the three files."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano $HOME/.local/bin/cardano-service\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"#!/bin/bash\n. /home/ada/.adaenv\n\nTOPOLOGY=${NODE_FILES}/${NODE_CONFIG}-topology.json\nDB_PATH=${NODE_HOME}/db\nCONFIG=${NODE_FILES}/${NODE_CONFIG}-config.json\nKES=${NODE_HOME}/kes.skey\nVRF=${NODE_HOME}/vrf.skey\nCERT=${NODE_HOME}/node.cert\ncardano-node +RTS -N4 --disable-delayed-os-memory-return -RTS run \\\n  --topology ${TOPOLOGY} \\\n  --database-path ${DB_PATH} \\\n  --socket-path ${CARDANO_NODE_SOCKET_PATH} \\\n  --port ${NODE_PORT} \\\n  --config ${CONFIG} \\\n  --shelley-kes-key ${KES} \\\n  --shelley-vrf-key ${VRF} \\\n  --shelley-operational-certificate ${CERT}\n")),(0,l.kt)("p",null,"Restart the service."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-service restart\n")))),(0,l.kt)("p",null,"While your core is starting you can transfer the ",(0,l.kt)("inlineCode",{parentName:"p"},"pool_name.metadata.json")," to your local machine and upload it to the prepared URL.\nDo the same with the extended metadata and your logos, if you have made them."),(0,l.kt)("p",null,"Check the status of the core. When it's up again you can submit the transactions.\nFirst the staking key registration, then repeat the same command for the stake pool registration."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh execute\n")))),(0,l.kt)("h3",{id:"confirm-successful-registration"},"Confirm successful registration"),(0,l.kt)("h3",{id:"poolvet"},"pool.vet"),(0,l.kt)("p",null,"pool.vet is a website for pool operators to check the validity of their stake pools on chain data. You can check this site ",(0,l.kt)("a",{parentName:"p",href:"https://pool.vet/"},"Pool.vet")," for problems and clues as to how to fix them."),(0,l.kt)("h3",{id:"adapoolsorg"},"adapools.org"),(0,l.kt)("p",null,"You should create an account and claim your pool here at ",(0,l.kt)("a",{parentName:"p",href:"https://adapools.org/"},"adapools.org.")),(0,l.kt)("h3",{id:"pooltoolio"},"pooltool.io"),(0,l.kt)("p",null,"You should also create an account and claim your pool here on ",(0,l.kt)("a",{parentName:"p",href:"https://pooltool.io"},"pooltool.io"),"."),(0,l.kt)("h1",{id:"rotate-kes-keys"},"Rotate KES keys"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Make sure to rotate your KES keys and node certificate before! they expire.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Before starting check ",(0,l.kt)("inlineCode",{parentName:"p"},"timedatectl")," on your offline machine and adjust, if needed.")),(0,l.kt)("p",null,"Create the new KES keypair. You will notice that the counter increments automatically."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"04c_genKESKeys.sh pool_name\n")))),(0,l.kt)("p",null,"Create a new operational certificate."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"04d_genNodeOpCert.sh pool_name\n")))),(0,l.kt)("p",null,"Now attach the new files."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh attach pool_name.vrf.skey\n01_workOffline.sh attach pool_name.kes-xxx.skey\n01_workOffline.sh attach pool_name.node-xxx.opcert\n")))),(0,l.kt)("p",null,"Unmount and bring the USB drive to the core.\nStop the node and extract the files."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-service stop\n01_workOffline.sh extract\n")))),(0,l.kt)("p",null,"Now rename/move them to match the startup script.\nThen start again. That's it."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mv pool_name.kes-xxx.skey kes.skey\nmv pool_name.vrf.skey vrf.skey\nmv pool_name.node-xxx.opcert node.cert\ncardano-service start \n")))),(0,l.kt)("h1",{id:"update-pool-registration"},"Update pool registration"),(0,l.kt)("p",null,"First get up-to-date information from the core via your USB drive."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh add wallet_name.payment\n")))),(0,l.kt)("p",null,"Switch to the offline machine and edit the values you want to change in the ",(0,l.kt)("inlineCode",{parentName:"p"},"pool_name.pool.json"),"."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod 600 pool_name.pool.json\nnano pool_name.pool.json\nchmod 400 pool_name.pool.json\n")))),(0,l.kt)("p",null,"Create a new certificate ",(0,l.kt)("inlineCode",{parentName:"p"},"pool_name.pool.cert")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"pool_name.metadata.json"),"."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"05a_genStakepoolCert.sh pool_name\n")))),(0,l.kt)("p",null,"Create the registration transaction. If the metadata didn't change you don't need to attach it to the transfer file."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"05c_regStakepoolCert.sh pool_name wallet_name.payment\n")))),(0,l.kt)("p",null,"Now switch to the core.\nFirst, if you changed the metadata, ",(0,l.kt)("inlineCode",{parentName:"p"},"01_workOffline.sh extract")," and upload it.\nOtherwise skip this step and submit the transaction directly. "),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh execute\n")))),(0,l.kt)("h1",{id:"claim-rewards"},"Claim rewards"),(0,l.kt)("p",null,"First get up-to-date information from the core via your USB drive."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh add wallet_name.payment\n01_workOffline.sh add wallet_name.staking\n")))),(0,l.kt)("p",null,"Switch over to the offline machine."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_claimRewards.sh wallet_name.staking wallet_name.payment\n")))),(0,l.kt)("p",null,"Back to the core."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh execute\n")))),(0,l.kt)("h1",{id:"send-a-simple-transaction"},"Send a simple transaction"),(0,l.kt)("p",null,"First get up-to-date information from the core via your USB drive.\nCreate a ",(0,l.kt)("inlineCode",{parentName:"p"},"other_wallet.payment.addr")," which contains the address (and only the address) you want to send your ADA to."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh add wallet_name.payment\n01_workOffline.sh attach other_wallet.payment.addr\n")))),(0,l.kt)("p",null,"Bring everything over to the cold machine and create the transaction.\nThis will send 1000 ADA from your pledge wallet to the other wallet.\n(Again everything in lovelaces. 1 ADA = 1000000 lovelace)"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"offline",label:"offline",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh extract\n01_sendLovelaces.sh wallet_name.payment other_wallet.payment 1000000000\n")))),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Make sure to meet your pledge at any time. And some ADA for transactions fees on top aren't bad.")),(0,l.kt)("p",null,"USB transfer and submitting at your core."),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"core",label:"core",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"01_workOffline.sh execute\n")))))}h.isMDXComponent=!0},1726:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/offline_workflow-6e8e18cb928553a0ac5d27ebb4e20691.jpg"}}]);