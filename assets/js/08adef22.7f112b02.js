"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[3642],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),o=n(6010),l=n(2466),i=n(6775),s=n(1980),p=n(7392),u=n(12);function c(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,p]=h({queryString:n,groupId:a}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var b=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==i&&(c(t),s(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",f.tabItem,null==l?void 0:l.className,{"tabs__item--active":i===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},4217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),l=n(5162);const i={},s="Two testnets, one Pi",p={unversionedId:"stake-pool-guides/two-testnets-one-pi",id:"stake-pool-guides/two-testnets-one-pi",title:"Two testnets, one Pi",description:"Operate both preview and preprod testnets on one Raspberry Pi 8gb",source:"@site/docs/stake-pool-guides/two-testnets-one-pi.md",sourceDirName:"stake-pool-guides",slug:"/stake-pool-guides/two-testnets-one-pi",permalink:"/docs/stake-pool-guides/two-testnets-one-pi",draft:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/stake-pool-guides/two-testnets-one-pi.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/stakepoolscripts"},next:{title:"Raspi-Node Guide",permalink:"/docs/stake-pool-guides/Raspberry-pi-os"}},u={},c=[{value:"Operate both preview and preprod testnets on one Raspberry Pi 8gb",id:"operate-both-preview-and-preprod-testnets-on-one-raspberry-pi-8gb",level:3},{value:"Flashable image of completed guide. Username is ubuntu password is lovelace/",id:"flashable-image-of-completed-guide-username-is-ubuntu-password-is-lovelace",level:2},{value:"Start by setting up your Raspberry Pi",id:"start-by-setting-up-your-raspberry-pi",level:2},{value:"OK you are back, lets get started",id:"ok-you-are-back-lets-get-started",level:3},{value:"Preview Environment file",id:"preview-environment-file",level:2},{value:"Preprod Environment file",id:"preprod-environment-file",level:2},{value:"Preview Operational files",id:"preview-operational-files",level:2},{value:"Preprod Operational files",id:"preprod-operational-files",level:2},{value:"Systemd Services to manage cardano-node",id:"systemd-services-to-manage-cardano-node",level:2},{value:"cardano-node Startup Scripts",id:"cardano-node-startup-scripts",level:2},{value:"Download prebuilt static binaries.",id:"download-prebuilt-static-binaries",level:2},{value:"Start up node on both networks",id:"start-up-node-on-both-networks",level:3},{value:"gliveView &amp; env",id:"gliveview--env",level:3},{value:"Install/Configure SPO Scripts",id:"installconfigure-spo-scripts",level:3},{value:"To Upgrade Stakepool Scripts",id:"to-upgrade-stakepool-scripts",level:3},{value:"Build ARM cardano-signer",id:"build-arm-cardano-signer",level:3},{value:"Static Server IP &amp; Port Forwarding",id:"static-server-ip--port-forwarding",level:3},{value:"Install Prometheus &amp; Node Exporter.",id:"install-prometheus--node-exporter",level:3},{value:"Configure Prometheus",id:"configure-prometheus",level:3},{value:"Install Grafana",id:"install-grafana",level:3}],d={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"two-testnets-one-pi"},"Two testnets, one Pi"),(0,r.kt)("h3",{id:"operate-both-preview-and-preprod-testnets-on-one-raspberry-pi-8gb"},"Operate both preview and preprod testnets on one Raspberry Pi 8gb"),(0,r.kt)("h2",{id:"flashable-image-of-completed-guide-username-is-ubuntu-password-is-lovelace"},"Flashable image of completed guide. Username is ubuntu password is lovelace/"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://testnet.armada-alliance.com/two-testnets.img.xz"},"two testnets image"),".\nBoth testnets will start syncing at boot. Pi works very hard for about an hour till synced up.\nGrafana on port 5000."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If any of these concepts are unknown, if you are confused or you see errors about anything please let us know in our ",(0,r.kt)("a",{parentName:"p",href:"https://t.me/armada_alli"},"Telegram")," group."),(0,r.kt)("p",{parentName:"admonition"},"You can make a couple wallets in Eternl now if you want to interact with testnet dapps. Otherwise we will be using cli created wallets with Martins SPO scripts managing them and the pools."),(0,r.kt)("p",{parentName:"admonition"},"Faucet urls: You will get 10k tada per network every 24 hours."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.preview.world.dev.cardano.org/basic-faucet"},"Preview Faucet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://faucet.preprod.world.dev.cardano.org/basic-faucet"},"Preprod Faucet")))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Be sure you have a public IP address and your router can forward ports. Does not have to be static."),(0,r.kt)("li",{parentName:"ol"},"Flash 64bit Ubuntu server, preferably on a USB3 stick 64 gb is good enough for now. Should have a heat sink on CPU."),(0,r.kt)("li",{parentName:"ol"},"Determine LAN IP address and ssh in, change the password. Going to use default ubuntu user for this guide.")),(0,r.kt)("h2",{id:"start-by-setting-up-your-raspberry-pi"},"Start by setting up your Raspberry Pi"),(0,r.kt)("p",null,"Follow the ",(0,r.kt)("a",{parentName:"p",href:"https://armada-alliance.com/docs/stake-pool-guides/pi-pool-tutorial/pi-node-full-guide/server-setup"},"server setup")," instructions. Then return here."),(0,r.kt)("h3",{id:"ok-you-are-back-lets-get-started"},"OK you are back, lets get started"),(0,r.kt)("p",null,"Install jq."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt install jq\n")),(0,r.kt)("p",null,"Create the directories for our project. You will then have two folders in ubuntu's home directory, one for each pool/network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mkdir -p ${HOME}/.local/bin\nmkdir -p ${HOME}/preview-pool/files ${HOME}/preprod-pool/files\nmkdir -p ${HOME}/preview-pool/scripts ${HOME}/preprod-pool/scripts\nmkdir -p ${HOME}/preview-pool/logs ${HOME}/preprod-pool/logs\nmkdir ${HOME}/git\nmkdir ${HOME}/tmp\n")),(0,r.kt)("p",null,"Add .local/bin to $PATH."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cd ${HOME}/.local/bin\necho "export PATH=\\"$PWD:\\$PATH\\"" >> $HOME/.bashrc\nexport PATH="$PWD:$PATH"\n')),(0,r.kt)("p",null,"Create a .adaenv file in each folder. These will hold the settings,variables and paths."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"touch ${HOME}/preview-pool/.adaenv\ntouch ${HOME}/preprod-pool/.adaenv\n")),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("h2",{id:"preview-environment-file"},"Preview Environment file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ${HOME}/preview-pool/.adaenv\n")),(0,r.kt)("p",null,"Add the following, we will add key and opcert values later after we have generated them. Notice the magic variable value. This is what chooses which network to join and is referenced in one of the specific genesis file we will download shortly from IOG. Preview will start on port 3000\nand preprod on 3001."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preview-pool/.adaenv"',title:'"/home/ubuntu/preview-pool/.adaenv"'},'export NODE_CONFIG=testnet\nexport NODE_HOME=/home/ubuntu/preview-pool\nexport NODE_PORT=3000\nexport NODE_FILES=/home/ubuntu/preview-pool/files\nexport NODE_BUILD_NUM=9746151\nexport CARDANO_NODE_SOCKET_PATH=/home/ubuntu/preview-pool/db/socket\nexport TOPOLOGY=${NODE_FILES}/topology.json\nexport DB_PATH=${NODE_HOME}/db\nexport CONFIG=${NODE_FILES}/config.json\nexport KES=${NODE_HOME}/<your-pool-name>.kes-000.skey\nexport VRF=${NODE_HOME}/<your-pool-name>.vrf.skey\nexport CERT=${NODE_HOME}/<your-pool-name>.node-000.opcert\nexport MAGIC=2\nexport CONFIG_NET=testnet-magic\\ ${MAGIC}\n\nexport PATH="/home/ubuntu/stakepoolscripts/bin:$PATH"\n'))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("h2",{id:"preprod-environment-file"},"Preprod Environment file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ${HOME}/preprod-pool/.adaenv\n")),(0,r.kt)("p",null,"Add the following, we will add key and opcert values later after we have generated them. Notice the magic variable value. This is what chooses which network to join and is referenced in one of the specific genesis file we will download shortly from IOG. Preview will start on port 3000\nand preprod on 3001."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preprod-pool/.adaenv"',title:'"/home/ubuntu/preprod-pool/.adaenv"'},'export NODE_CONFIG=testnet\nexport NODE_HOME=/home/ubuntu/preprod-pool\nexport NODE_PORT=3001\nexport NODE_FILES=/home/ubuntu/preprod-pool/files\nexport NODE_BUILD_NUM=9746151\nexport CARDANO_NODE_SOCKET_PATH=/home/ubuntu/preprod-pool/db/socket\nexport TOPOLOGY=${NODE_FILES}/topology.json\nexport DB_PATH=${NODE_HOME}/db\nexport CONFIG=${NODE_FILES}/config.json\nexport KES=${NODE_HOME}/<your-pool-name>.kes-000.skey\nexport VRF=${NODE_HOME}/<your-pool-name>.vrf.skey\nexport CERT=${NODE_HOME}/<your-pool-name>.node-000.opcert\nexport MAGIC=1\nexport CONFIG_NET=testnet-magic\\ ${MAGIC}\n\nexport PATH="/home/ubuntu/stakepoolscripts/bin:$PATH"\n')))),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("h2",{id:"preview-operational-files"},"Preview Operational files"),(0,r.kt)("p",null,"Change directory into the files folder for each network and download them. The file links can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://book.world.dev.cardano.org/environments.html#preview-testnet"},"Cardano Operations Book"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ${HOME}/preview-pool/files\nwget https://book.world.dev.cardano.org/environments/preview/config.json\nwget https://book.world.dev.cardano.org/environments/preview/topology.json\nwget https://book.world.dev.cardano.org/environments/preview/byron-genesis.json\nwget https://book.world.dev.cardano.org/environments/preview/shelley-genesis.json\nwget https://book.world.dev.cardano.org/environments/preview/alonzo-genesis.json\nwget https://book.world.dev.cardano.org/environments/preview/conway-genesis.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\nEnable TraceBlockFetchDecisions and listen on all interfaces.\n\n```bash title=">_ Terminal"\nsed -i config.json \\\n    -e "s/TraceBlockFetchDecisions\\": false/TraceBlockFetchDecisions\\": true/g" \\\n    -e "s/127.0.0.1/0.0.0.0/g"\n'))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("h2",{id:"preprod-operational-files"},"Preprod Operational files"),(0,r.kt)("p",null,"Change directory into the files folder for each network and download them. The file links can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://book.world.dev.cardano.org/environments.html#preprod-testnet"},"Cardano Operations Book"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ${HOME}/preprod-pool/files\nwget https://book.world.dev.cardano.org/environments/preprod/config.json\nwget https://book.world.dev.cardano.org/environments/preprod/topology.json\nwget https://book.world.dev.cardano.org/environments/preprod/byron-genesis.json\nwget https://book.world.dev.cardano.org/environments/preprod/shelley-genesis.json\nwget https://book.world.dev.cardano.org/environments/preprod/alonzo-genesis.json\nwget https://book.world.dev.cardano.org/environments/preprod/conway-genesis.json\n")),(0,r.kt)("p",null,"Enable TraceBlockFetchDecisions, listen on all interfaces and change the ports for hasEKG and hasPrometheus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sed -i config.json \\\n    -e "s/TraceBlockFetchDecisions\\": false/TraceBlockFetchDecisions\\": true/g" \\\n    -e "s/127.0.0.1/0.0.0.0/g" \\\n    -e "s/12788/12789/g" \\\n    -e "s/12798/12799/g"\n')))),(0,r.kt)("h2",{id:"systemd-services-to-manage-cardano-node"},"Systemd Services to manage cardano-node"),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nano /etc/systemd/system/cardano-preview.service\n")),(0,r.kt)("p",null,"Paste in the following."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/etc/systemd/system/cardano-preview.service"',title:'"/etc/systemd/system/cardano-preview.service"'},'# The Cardano Node Service (part of systemd)\n# file: /etc/systemd/system/cardano-node.service\n\n[Unit]\nDescription     = Cardano preview service\nWants           = network-online.target\nAfter           = network-online.target\n\n[Service]\nUser            = ubuntu\nType            = simple\nWorkingDirectory= /home/ubuntu/preview-pool\nExecStart       = /bin/bash -c "PATH=/home/ubuntu/.local/bin:$PATH exec /home/ubuntu/.local/bin/preview-service"\nKillSignal=SIGINT\nRestartKillSignal=SIGINT\nTimeoutStopSec=60\nLimitNOFILE=32768\nRestart=always\nRestartSec=60\nEnvironmentFile=-/home/ubuntu/preview-pool/.adaenv\n\n[Install]\nWantedBy= multi-user.target\n')),(0,r.kt)("p",null,"Reload systemd to pick up changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl daemon-reload\n"))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nano /etc/systemd/system/cardano-preprod.service\n")),(0,r.kt)("p",null,"Paste in the following."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/etc/systemd/system/cardano-preprod.service"',title:'"/etc/systemd/system/cardano-preprod.service"'},'# The Cardano Node Service (part of systemd)\n# file: /etc/systemd/system/cardano-node.service\n\n[Unit]\nDescription     = Cardano preprod service\nWants           = network-online.target\nAfter           = network-online.target\n\n[Service]\nUser            = ubuntu\nType            = simple\nWorkingDirectory= /home/ubuntu/preprod-pool\nExecStart       = /bin/bash -c "PATH=/home/ubuntu/.local/bin:$PATH exec /home/ubuntu/.local/bin/preprod-service"\nKillSignal=SIGINT\nRestartKillSignal=SIGINT\nTimeoutStopSec=60\nLimitNOFILE=32768\nRestart=always\nRestartSec=60\nEnvironmentFile=-/home/ubuntu/preprod-pool/.adaenv\n\n[Install]\nWantedBy= multi-user.target\n')),(0,r.kt)("p",null,"Reload systemd to pick up changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl daemon-reload\n")))),(0,r.kt)("h2",{id:"cardano-node-startup-scripts"},"cardano-node Startup Scripts"),(0,r.kt)("p",null,"cardano node will run as a relay here. Starting this script with KES, VRF and OPCERT variables uncommented will start cardano-node as a core (block producer)."),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ~/.local/bin/preview-service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/.local/bin/preview-service"',title:'"/home/ubuntu/.local/bin/preview-service"'},"#!/bin/bash\n. /home/ubuntu/preview-pool/.adaenv\n\n## +RTS -N4 -RTS = Multicore(4)\ncardano-node run +RTS -N4 -RTS \\\n  --topology ${TOPOLOGY} \\\n  --database-path ${DB_PATH} \\\n  --socket-path ${CARDANO_NODE_SOCKET_PATH} \\\n  --host-addr 0.0.0.0 \\\n  --port ${NODE_PORT} \\\n  --config ${CONFIG}\n#  --shelley-kes-key ${KES} \\\n#  --shelley-vrf-key ${VRF} \\\n#  --shelley-operational-certificate ${CERT}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x ${HOME}/.local/bin/preview-service\n"))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ~/.local/bin/preprod-service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/.local/bin/preprod-service"',title:'"/home/ubuntu/.local/bin/preprod-service"'},"#!/bin/bash\n. /home/ubuntu/preprod-pool/.adaenv\n\n## +RTS -N4 -RTS = Multicore(4)\ncardano-node run +RTS -N4 -RTS \\\n  --topology ${TOPOLOGY} \\\n  --database-path ${DB_PATH} \\\n  --socket-path ${CARDANO_NODE_SOCKET_PATH} \\\n  --host-addr 0.0.0.0 \\\n  --port ${NODE_PORT} \\\n  --config ${CONFIG}\n#  --shelley-kes-key ${KES} \\\n#  --shelley-vrf-key ${VRF} \\\n#  --shelley-operational-certificate ${CERT}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x ${HOME}/.local/bin/preprod-service\n")))),(0,r.kt)("h2",{id:"download-prebuilt-static-binaries"},"Download prebuilt static binaries."),(0,r.kt)("p",null,"Here you can either build libsodium and secp256k1 libraries, link them, install GHCUP, install GHC and Cabal and build the binaries yourself...\nor just download a set of statically linked binaries built by the Armada alliance. This guide is taking the easy route...building them on a Pi takes 10 hours or so. The set we will be using are built by an IOG engineer in his spare time on his own infrastructure. Follow the ",(0,r.kt)("a",{parentName:"p",href:"https://armada-alliance.com/docs/stake-pool-guides/oracle-ampere"},"Oracle guide"),' if you want the "full" build your own binary experience.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ${HOME}/tmp\nwget -O 8_1_1.zip https://github.com/armada-alliance/cardano-node-binaries/blob/main/static-binaries/8_1_1.zip?raw=true\nunzip 8_1_1.zip\nmv cardano-node/* ${HOME}/.local/bin\n")),(0,r.kt)("p",null,"Confirm Binaries are in $PATH."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-node version\ncardano-cli version\n")),(0,r.kt)("h3",{id:"start-up-node-on-both-networks"},"Start up node on both networks"),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl start cardano-preview.service\nsudo systemctl status cardano-preview.service\n")),(0,r.kt)("p",null,"If status is green running go ahead and enable it to run on system startup."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl enable cardano-preview.service\n"))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl start cardano-preprod.service\nsudo systemctl status cardano-preprod.service\n")),(0,r.kt)("p",null,"If status is green running go ahead and enable it to run on system startup."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl enable cardano-preprod.service\n")))),(0,r.kt)("h3",{id:"gliveview--env"},"gliveView & env"),(0,r.kt)("p",null,"Download the gLiveView.sh script and it's accompanying env file."),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ${HOME}/preview-pool/scripts\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/gLiveView.sh\n. ~/preview-pool/.adaenv\n")),(0,r.kt)("p",null,"Add a line sourcing our .adaenv file to the top of the env file and adjust some paths. use 'nano env' to open and inspect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sed -i env \\\n    -e "/#CNODEBIN/i. ${HOME}/preview-pool/.adaenv" \\\n    -e "s/\\#CNODE_HOME=\\"\\/opt\\/cardano\\/cnode\\"/CNODE_HOME=\\"\\${HOME}\\/preview-pool\\"/g" \\\n    -e "s/\\#CNODE_PORT=6000"/CNODE_PORT=\\"\'${NODE_PORT}\'\\""/g" \\\n    -e "s/\\#CONFIG=\\"\\${CNODE_HOME}\\/files\\/config.json\\"/CONFIG=\\"\\${NODE_FILES}\\/config.json\\"/g" \\\n    -e "s/\\#SOCKET=\\"\\${CNODE_HOME}\\/sockets\\/node0.socket\\"/SOCKET=\\"\\${CNODE_HOME}\\/db\\/socket\\"/g" \\\n    -e "s/\\#TOPOLOGY=\\"\\${CNODE_HOME}\\/files\\/topology.json\\"/TOPOLOGY=\\"\\${NODE_FILES}\\/topology.json\\"/g" \\\n    -e "s/\\#LOG_DIR=\\"\\${CNODE_HOME}\\/logs\\"/LOG_DIR=\\"\\${CNODE_HOME}\\/logs\\"/g" \\\n    -e "s/\\#EKG_HOST"/EKG_HOST"/g" \\\n    -e "s/\\#EKG_PORT"/EKG_PORT"/g" \\\n    -e "s/\\#PROM_HOST"/PROM_HOST"/g" \\\n    -e "s/\\#PROM_PORT"/PROM_PORT"/g"\n')),(0,r.kt)("p",null,"Allow execution of gLiveView.sh."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x gLiveView.sh\n")),(0,r.kt)("p",null,"Run the script. You do not have any inbound connections. Just confirm it's running and following tip of chain(synced)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"./gLiveView.sh\n"))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ${HOME}/preprod-pool/scripts\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/gLiveView.sh\n. ~/preprod-pool/.adaenv\n")),(0,r.kt)("p",null,"Add a line sourcing our .adaenv file to the top of the env file and adjust some paths. use 'nano env' to open and inspect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sed -i env \\\n    -e "/#CNODEBIN/i. ${HOME}/preprod-pool/.adaenv" \\\n    -e "s/\\#CNODE_HOME=\\"\\/opt\\/cardano\\/cnode\\"/CNODE_HOME=\\"\\${HOME}\\/preprod-pool\\"/g" \\\n    -e "s/\\#CNODE_PORT=6000"/CNODE_PORT=\\"\'${NODE_PORT}\'\\""/g" \\\n    -e "s/\\#CONFIG=\\"\\${CNODE_HOME}\\/files\\/config.json\\"/CONFIG=\\"\\${NODE_FILES}\\/config.json\\"/g" \\\n    -e "s/\\#SOCKET=\\"\\${CNODE_HOME}\\/sockets\\/node0.socket\\"/SOCKET=\\"\\${CNODE_HOME}\\/db\\/socket\\"/g" \\\n    -e "s/\\#TOPOLOGY=\\"\\${CNODE_HOME}\\/files\\/topology.json\\"/TOPOLOGY=\\"\\${NODE_FILES}\\/topology.json\\"/g" \\\n    -e "s/\\#LOG_DIR=\\"\\${CNODE_HOME}\\/logs\\"/LOG_DIR=\\"\\${CNODE_HOME}\\/logs\\"/g" \\\n    -e "s/\\#EKG_PORT=12788"/EKG_PORT=\\"12789\\""/g" \\\n    -e "s/\\#PROM_PORT=12798"/PROM_PORT=\\"12799\\""/g"\n')),(0,r.kt)("p",null,"Allow execution of gLiveView.sh."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x gLiveView.sh\n")),(0,r.kt)("p",null,"Run the script. You do not have any inbound connections. Just confirm it's running and following tip of chain(synced)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"./gLiveView.sh\n")))),(0,r.kt)("h3",{id:"installconfigure-spo-scripts"},"Install/Configure SPO Scripts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mkdir -p ~/stakepoolscripts/bin\ncd $HOME/stakepoolscripts\ngit init && git remote add origin https://github.com/gitmachtl/scripts.git\ngit fetch origin && git reset --hard origin/master\ncp cardano/testnet/* bin/\n# Remove the x86 binaries. We need arm builds.\nrm ~/stakepoolscripts/bin/cardano-address bech32 token-metadata-creator catalyst-toolbox cardano-signer\n")),(0,r.kt)("h3",{id:"to-upgrade-stakepool-scripts"},"To Upgrade Stakepool Scripts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $HOME/stakepoolscripts\ngit fetch origin && git reset --hard origin/master\ncp cardano/testnet/* bin/\n# Remove the x86 binaries. To continue using the ones in ~/.local/bin.\nrm ~/stakepoolscripts/bin/cardano-address bech32 token-metadata-creator catalyst-toolbox cardano-signer\n")),(0,r.kt)("p",null,"Add the bin directory to your PATH."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cd ~/stakepoolscripts/bin\necho "export PATH=\\"$PWD:\\$PATH\\"" >> $HOME/.bashrc\nexport PATH="$PWD:$PATH"\n')),(0,r.kt)("h3",{id:"build-arm-cardano-signer"},"Build ARM cardano-signer"),(0,r.kt)("p",null,"This is a javascript project and we need npm to build."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo snap install node --classic\ncd $HOME/git\ngit clone https://github.com/gitmachtl/cardano-signer.git\ncd cardano-signer/src\nnpm i pkg -D -S\nnpm install\nnode_modules/.bin/pkg cardano-signer.js\nmv cardano-signer-linux ~/.local/bin/cardano-signer\nchmod +x ~/.local/bin/cardano-signer\n. ~/.bashrc\n# test\ncardano-signer\n")),(0,r.kt)("p",null,"Create a file named common.inc in each pool folder."),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ~/preview-pool/common.inc\n")),(0,r.kt)("p",null,"This common.inc environment file will be read by SPO scripts if it is present in the calling directory. Inspect the top of the file for more information. Basically a copy of this file for the intended network can be put in your project folder and the correct network will be used. Here we have a copy in each pool folder where we will be creating pool and wallets. If you want a subdirectory of the pool folder to hold wallet or asset files put a copy of the common.inc file in the subdirectory as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preview-pool/common.inc"',title:'"/home/ubuntu/preview-pool/common.inc"'},'#!/bin/bash\nunset magicparam network addrformat\n\n##############################################################################################################################\n#\n# MAIN CONFIG FILE:\n#\n# Please set the following variables to your needs, you can overwrite them dynamically\n# by placing a file with name "common.inc" in the calling directory or in "$HOME/.common.inc".\n# It will be sourced into this file automatically if present and can overwrite the values below dynamically :-)\n#\n##############################################################################################################################\n\n\n#--------- Set the Path to your node socket file and to your genesis files here ---------\nsocket="/home/ubuntu/preview-pool/db/socket" #Path to your cardano-node socket for machines in online-mode. Another example would be "$HOME/cnode/sockets/node.socket"\ngenesisfile="/home/ubuntu/preview-pool/files/shelley-genesis.json"           #Shelley-Genesis path, you can also use the placeholder $HOME to specify your home directory\ngenesisfile_byron="/home/ubuntu/preview-pool/files/byron-genesis.json"       #Byron-Genesis path, you can also use the placeholder $HOME to specify your home directory\n\n\n#--------- Set the Path to your main binaries here ---------\ncardanocli="cardano-cli"    #Path to your cardano-cli binary you wanna use. If your binary is present in the Path just set it to "cardano-cli" without the "./" infront\ncardanonode="cardano-node"  #Path to your cardano-node binary you wanna use. If your binary is present in the Path just set it to "cardano-node" without the "./" infront\nbech32_bin="bech32"     #Path to your bech32 binary you wanna use. If your binary is present in the Path just set it to "bech32" without the "./" infront\ncardanosigner="cardano-signer"\n\n\n#--------- You can work in offline mode too, please read the instructions on the github repo README :-)\nofflineMode="no"            #change this to "yes" if you run these scripts on a cold machine, it need a counterpart with set to "no" on a hot machine\nofflineFile="./offlineTransfer.json"    #path to the filename (JSON) that will be used to transfer the data between a hot and a cold machine\n\n\n#network="Mainnet"  #Mainnet (Default)\n#network="PreProd"  #PreProd (new default Testnet)\nnetwork="Preview"   #Preview (new fast Testnet)\n#network="Vasil-Dev"    #Vasil-Dev TestChain\n#network="Legacy"   #Legacy TestChain (formally known as Public-Testnet)\n\n#--------- You can of course specify your own values by setting a new network=, magicparam=, addrformat= and byronToShelleyEpochs= parameter :-)\n#network="new-devchain"; magicparam="--testnet-magic 11111"; addrformat="--testnet-magic 11111"; byronToShelleyEpochs=6 #Custom Chain settings\n\n\n#--------- some other stuff -----\nshowVersionInfo="yes"       #yes/no to show the version info and script mode on every script call\nqueryTokenRegistry="yes"    #yes/no to query each native asset/token on the token registry server live\ncropTxOutput="yes"      #yes/no to crop the unsigned/signed txfile outputs on transactions to a max. of 4000chars\n')),(0,r.kt)("p",null,"Test the scripts are configured correctly by issuing.."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ~/preview-pool\n00_common.sh\n")),(0,r.kt)("p",null,"Should see Version-Info:, Scripts-Mode: and the network that was queried. If there is something wrong you will see a mushroom cloud and hopefully a clue how to fix the issue.")),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ~/preprod-pool/common.inc\n")),(0,r.kt)("p",null,"This common.inc environment file will be read by SPO scripts if it is present in the calling directory. Inspect the top of the file for more information. Basically a copy of this file for the intended network can be put in your project folder and the correct network will be used. Here we have a copy in each pool folder where we will be creating pool and wallets. If you want a subdirectory of the pool folder to hold wallet or asset files put a copy of the common.inc file in the subdirectory as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preprod-pool/common.inc"',title:'"/home/ubuntu/preprod-pool/common.inc"'},'#!/bin/bash\nunset magicparam network addrformat\n\n##############################################################################################################################\n#\n# MAIN CONFIG FILE:\n#\n# Please set the following variables to your needs, you can overwrite them dynamically\n# by placing a file with name "common.inc" in the calling directory or in "$HOME/.common.inc".\n# It will be sourced into this file automatically if present and can overwrite the values below dynamically :-)\n#\n##############################################################################################################################\n\n\n#--------- Set the Path to your node socket file and to your genesis files here ---------\nsocket="/home/ubuntu/preprod-pool/db/socket" #Path to your cardano-node socket for machines in online-mode. Another example would be "$HOME/cnode/sockets/node.socket"\ngenesisfile="/home/ubuntu/preprod-pool/files/shelley-genesis.json"           #Shelley-Genesis path, you can also use the placeholder $HOME to specify your home directory\ngenesisfile_byron="/home/ubuntu/preprod-pool/files/byron-genesis.json"       #Byron-Genesis path, you can also use the placeholder $HOME to specify your home directory\n\n\n\n#--------- Set the Path to your main binaries here ---------\ncardanocli="cardano-cli"    #Path to your cardano-cli binary you wanna use. If your binary is present in the Path just set it to "cardano-cli" without the "./" infront\ncardanonode="cardano-node"  #Path to your cardano-node binary you wanna use. If your binary is present in the Path just set it to "cardano-node" without the "./" infront\nbech32_bin="bech32"     #Path to your bech32 binary you wanna use. If your binary is present in the Path just set it to "bech32" without the "./" infront\ncardanosigner="cardano-signer"\n\n\n#--------- You can work in offline mode too, please read the instructions on the github repo README :-)\nofflineMode="no"            #change this to "yes" if you run these scripts on a cold machine, it need a counterpart with set to "no" on a hot machine\nofflineFile="./offlineTransfer.json"    #path to the filename (JSON) that will be used to transfer the data between a hot and a cold machine\n\n\n#------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n#--------- Only needed if you wanna do catalyst voting or if you wanna include your itn witness for your pool-ticker\njcli_bin="./jcli"               #Path to your jcli binary you wanna use. If your binary is present in the Path just set it to "jcli" without the "./" infront\ncatalyst_toolbox_bin="./catalyst-toolbox"   #Path to your catalyst-toolbox binary you wanna use. If your binary is present in the Path just set it to "catalyst-toolbox" without the "./" infront\nvoter_registration_bin="./voter-registration"   #Path to your voter-registration binary you wanna use. If your binary is present in the Path just set it to "voter-registration" without the "./" infront\n\n\n#--------- Only needed if you wanna use a hardware key (Ledger/Trezor) too, please read the instructions on the github repo README :-)\ncardanohwcli="cardano-hw-cli"      #Path to your cardano-hw-cli binary you wanna use. If your binary is present in the Path just set it to "cardano-hw-cli" without the "./" infront\n\n\n#--------- Only needed if you wanna generate the right format for the NativeAsset Metadata Registry\ncardanometa="token-metadata-creator" #Path to your token-metadata-creator binary you wanna use. If present in the Path just set it to "token-metadata-creator" without the "./" infront\n\n#--------- Only needed if you wanna change the BlockChain from the Mainnet to a Testnet Chain Setup, uncomment the network you wanna use by removing the leading #\n#          Using a preconfigured network name automatically loads and sets the magicparam, addrformat and byronToShelleyEpochs parameters, also API-URLs, etc.\n\n#network="Mainnet"  #Mainnet (Default)\nnetwork="PreProd"   #PreProd (new default Testnet)\n#network="Preview"  #Preview (new fast Testnet)\n#network="Vasil-Dev"    #Vasil-Dev TestChain\n#network="Legacy"   #Legacy TestChain (formally known as Public-Testnet)\n\n#--------- You can of course specify your own values by setting a new network=, magicparam=, addrformat= and byronToShelleyEpochs= parameter :-)\n#network="new-devchain"; magicparam="--testnet-magic 11111"; addrformat="--testnet-magic 11111"; byronToShelleyEpochs=6 #Custom Chain settings\n\n\n\n#--------- some other stuff -----\nshowVersionInfo="yes"       #yes/no to show the version info and script mode on every script call\nqueryTokenRegistry="yes"    #yes/no to query each native asset/token on the token registry server live\ncropTxOutput="yes"      #yes/no to crop the unsigned/signed txfile outputs on transactions to a max. of 4000chars\n')),(0,r.kt)("p",null,"Test the scripts are configured correctly by issuing.."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd ~/preprod-pool\n00_common.sh\n")),(0,r.kt)("p",null,"Should see Version-Info:, Scripts-Mode: and the network that was queried. If there is something wrong you will see a mushroom cloud and hopefully a clue how to fix the issue."))),(0,r.kt)("h3",{id:"static-server-ip--port-forwarding"},"Static Server IP & Port Forwarding"),(0,r.kt)("p",null,"Now would be a good time to forward ports to your Raspberry Pi. 3000, 3001, 443, 80. If you own a domain setup your DNS records."),(0,r.kt)("h3",{id:"install-prometheus--node-exporter"},"Install Prometheus & Node Exporter."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Prometheus can scrape the http endpoints of other servers running node exporter. Meaning Grafana and Prometheus does not have to be installed on your core and relays. Only the package prometheus-node-exporter is required if you would like to build a central Grafana dashboard for the pool, freeing up resources and having a single dashboard to monitor everything.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt install prometheus prometheus-node-exporter -y\n")),(0,r.kt)("p",null,"Disable them in systemd for now."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl disable prometheus.service\nsudo systemctl disable prometheus-node-exporter.service\n")),(0,r.kt)("h3",{id:"configure-prometheus"},"Configure Prometheus"),(0,r.kt)("p",null,"Open prometheus.yml."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nano /etc/prometheus/prometheus.yml\n")),(0,r.kt)("p",null,"Replace the contents of the file with."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Indentation must be correct YAML format or Prometheus will fail to start.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="/etc/prometheus/prometheus.yml"',title:'"/etc/prometheus/prometheus.yml"'},"global:\n  scrape_interval: 15s # By default, scrape targets every 15 seconds.\n\n  # Attach these labels to any time series or alerts when communicating with\n  # external systems (federation, remote storage, Alertmanager).\n  external_labels:\n    monitor: \"codelab-monitor\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label job=<job_name> to any timeseries scraped from this config.\n  - job_name: \"Prometheus\" # To scrape data from Prometheus Node Exporter\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:12798']\n        labels:\n          alias: 'Preview'\n          type:  'cardano-node'\n      - targets: ['localhost:12799']\n        labels:\n          alias: 'Preprod'\n          type:  'cardano-node'\n\n      - targets: [\"localhost:9100\"]\n        labels:\n          alias: \"Ubuntu\"\n          type: \"node\"\n")),(0,r.kt)("p",null,"Save & exit."),(0,r.kt)("p",null,"Start Prometheus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl start prometheus.service\n")),(0,r.kt)("h3",{id:"install-grafana"},"Install Grafana"),(0,r.kt)("admonition",{title:"GRAFANA REPOSITORY",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/grafana/grafana"},"https://github.com/grafana/grafana"))),(0,r.kt)("p",null,"Add Grafana's gpg key to Ubuntu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo su\nwget -O- https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/grafana-archive-keyring.gpg\n")),(0,r.kt)("p",null,"Add latest stable repo to apt sources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'echo "deb [arch=arm64 signed-by=/usr/share/keyrings/grafana-archive-keyring.gpg] https://apt.grafana.com stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list\n')),(0,r.kt)("p",null,"Update your package lists & install Grafana."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt update; sudo apt install grafana\n")),(0,r.kt)("p",null,"Change the port Grafana listens on so it does not clash with cardano-node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sudo sed -i /etc/grafana/grafana.ini \\\n         -e "s#;http_port#http_port#" \\\n         -e "s#3000#5000#"\n')),(0,r.kt)("p",null,"Add a few bash functions to the bottom of .bashrc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano ~/.bashrc\n")),(0,r.kt)("p",null,"Ad these to the bottom."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cardano-service() {\n  #do things with parameters like $1 such as\n  sudo systemctl "$1" cardano-preprod.service\n  sudo systemctl "$1" cardano-preview.service\n}\n\ncardano-monitor() {\n  #do things with parameters like $1 such as\n  sudo systemctl "$1" prometheus.service\n  sudo systemctl "$1" prometheus-node-exporter.service\n  sudo systemctl "$1" grafana-server.service\n}\n\ncardano-reload() {\n  # Reload P2P networking without restarting node...hot load peers\n  CPID=$(pidof cardano-node)\n  kill -SIGHUP ${CPID}\n  echo ${CPID}\n}\n\n')),(0,r.kt)("p",null,"source those changes into your current shell environment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"source ~/.bashrc\n")),(0,r.kt)("p",null,"Enable cardano and monitoring services to start at boot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-service enable\ncardano-monitor enable\n")),(0,r.kt)("h1",{id:"this-is-where-i-created-an-img-file"},"This is where I created an img file"),(0,r.kt)("h1",{id:"work-in-progress-stay-tuned"},"work in progress stay tuned"),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano .local/bin/preview-service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preview-pool/.adaenv"',title:'"/home/ubuntu/preview-pool/.adaenv"'},"some file\n"))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"some terminal\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preprod-pool/.adaenv"',title:'"/home/ubuntu/preprod-pool/.adaenv"'},"some file\n")))),(0,r.kt)(o.Z,{groupId:"NETWORK",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Preview",label:"Preview",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano .local/bin/preview-service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preview-pool/.adaenv"',title:'"/home/ubuntu/preview-pool/.adaenv"'},"some file\n"))),(0,r.kt)(l.Z,{value:"Preprod",label:"Preprod",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"some terminal\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="/home/ubuntu/preprod-pool/.adaenv"',title:'"/home/ubuntu/preprod-pool/.adaenv"'},"some file\n")))))}h.isMDXComponent=!0}}]);