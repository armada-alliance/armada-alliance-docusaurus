"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[6988],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>g});var o=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=o.createContext({}),p=function(e){var n=o.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),f=t,g=d["".concat(s,".").concat(f)]||d[f]||u[f]||a;return r?o.createElement(g,i(i({ref:n},c),{},{components:r})):o.createElement(g,i({ref:n},c))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:t,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6373:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=r(7462),t=(r(7294),r(3905));const a={},i=void 0,l={unversionedId:"ergo-developer-guides/example_ergo_config_file",id:"ergo-developer-guides/example_ergo_config_file",title:"example_ergo_config_file",description:"",source:"@site/docs/ergo-developer-guides/example_ergo_config_file.md",sourceDirName:"ergo-developer-guides",slug:"/ergo-developer-guides/example_ergo_config_file",permalink:"/docs/ergo-developer-guides/example_ergo_config_file",draft:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/ergo-developer-guides/example_ergo_config_file.md",tags:[],version:"current",frontMatter:{}},s={},p=[],c={toc:p},d="wrapper";function u(e){let{components:n,...r}=e;return(0,t.kt)(d,(0,o.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'ergo {\n    node {\n        mining = false\n        extraIndex = false\n        utxo {\n            # Download and apply UTxO set snapshot and full-blocks after that\n            utxoBootstrap = false\n\n            # How many utxo set snapshots to store, 0 means that they are not stored at all\n            storingUtxoSnapshots = 2\n\n            # How many utxo set snapshots for a height with the same id we need to find in p2p network\n            # in order to start downloading it\n            p2pUtxoSnapshots = 2\n        }\n        # Settings releated to headers-chain bootstrapping via NiPoPows\n        nipopow {\n            # Download PoPoW proof on node utxoBootstrap\n            nipopowBootstrap = false\n\n            #how many different proofs we are downloading from other peers\n            # and compare with each other, before choosing the best one\n            p2pNipopows = 2\n        }\n    }\n}\nscorex {\n    restApi {\n        # node which exposes restApi in firewall should define publicly accessible URL of it\n        # you will need to enable port forwarding from logging into your router for 9053\n        # publicUrl = "http://xxx.xxx.xxx.xxx:9053"\n        # apiKeyHash = "CHANGE_ME_HASH"\n    }\n    network {\n        # For below declared address do not include "http://"!\n        # you will need to enable port forwarding from logging into your router for 9030\n        # declaredAddress = "xxx.xxx.xxx.xxx:9030"\n        # nodeName = "my-ergo-node"\n    }\n}\n')))}u.isMDXComponent=!0}}]);