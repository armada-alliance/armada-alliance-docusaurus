"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[2406],{714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var s=t(4848),a=t(8453),o=t(1470),r=t(9365);const l={description:"How to get your Stake Pools Slot Assignments for next Epoch"},i="CNCLI Leader Logs",c={id:"stake-pool-guides/leader-logs",title:"CNCLI Leader Logs",description:"How to get your Stake Pools Slot Assignments for next Epoch",source:"@site/docs/stake-pool-guides/leader-logs.mdx",sourceDirName:"stake-pool-guides",slug:"/stake-pool-guides/leader-logs",permalink:"/docs/stake-pool-guides/leader-logs",draft:!1,unlisted:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/stake-pool-guides/leader-logs.mdx",tags:[],version:"current",frontMatter:{description:"How to get your Stake Pools Slot Assignments for next Epoch"},sidebar:"tutorialSidebar",previous:{title:"Update Pools Registration Certificate",permalink:"/docs/stake-pool-guides/pi-pool-tutorial/update-registration-cert"},next:{title:"Grafana Alerts with Telegram",permalink:"/docs/stake-pool-guides/grafana-alerts-with-telegram"}},d={},h=[{value:"Build CNCLI (thanks to @AndrewWestberg)",id:"build-cncli-thanks-to-andrewwestberg",level:2},{value:"Prepare Rust Environment and install Rustup",id:"prepare-rust-environment-and-install-rustup",level:3},{value:"Build cncli",id:"build-cncli",level:3},{value:"Run cncli sync and deploy it as a service",id:"run-cncli-sync-and-deploy-it-as-a-service",level:2},{value:"Create the leaderlog-stake-snapshot-v4.sh script (thanks to @sayshar)",id:"create-the-leaderlog-stake-snapshot-v4sh-script-thanks-to-sayshar",level:3},{value:"Run leaderlog script",id:"run-leaderlog-script",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"cncli-leader-logs",children:"CNCLI Leader Logs"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["CNCLI method still works, but before you start building, take a look at ",(0,s.jsx)(n.a,{href:"https://github.com/asnakep/ScheduledBlocks",children:"this method"})," by ",(0,s.jsx)(n.a,{href:"https://www.adasnakepool.com/",children:"ADA Snake Pool"}),"."]}),(0,s.jsx)(n.p,{children:'"Lightweight and Portable Scheduled Blocks Checker for Next, Current and Previous Epochs. No cardano-node Required, data is taken from blockfrost.io and armada-alliance.com."'})]}),"\n",(0,s.jsxs)(n.h2,{id:"build-cncli-thanks-to-andrewwestberg",children:["Build CNCLI (thanks to ",(0,s.jsx)(n.a,{href:"https://github.com/AndrewWestberg",children:"@AndrewWestberg"}),")"]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Running it on your block-producing/Core node is the convenient way, but to save resources you may build and run cncli on another (i.e. your monitoring) device. Therefore you will need to get the stake-snapshot.json from one of your running nodes and copy the genesis files and the vrf.skey from your Core to the particular device."})}),"\n",(0,s.jsx)(n.h3,{id:"prepare-rust-environment-and-install-rustup",children:"Prepare Rust Environment and install Rustup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"mkdir -p $HOME/.cargo/bin\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"Choose Option 1 (default)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"source $HOME/.cargo/env\n\nrustup install stable\n\nrustup default stable\n\nrustup update\n\nrustup component add clippy rustfmt\n"})}),"\n",(0,s.jsx)(n.p,{children:"Install any necessary packages. Your system may already have most to all of these."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"Monitor",label:"Monitor",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"sudo apt update -y && sudo apt install -y automake \\ \nbuild-essential pkg-config libffi-dev libgmp-dev \\ \nlibssl-dev libtinfo-dev libsystemd-dev zlib1g-dev \\ \nmake g++ tmux git jq wget libncursesw5 libtool autoconf\n"})})}),(0,s.jsx)(r.A,{value:"Core",label:"Core",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"sudo apt update -y\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"build-cncli",children:"Build cncli"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"# If you don't have a $HOME/git folder you can create one using:\n# mkdir $HOME/git\n\ncd $HOME/git\n\ngit clone --recurse-submodules https://github.com/AndrewWestberg/cncli\n\ncd cncli\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Check ",(0,s.jsx)(n.a,{href:"https://github.com/AndrewWestberg/cncli",children:"https://github.com/AndrewWestberg/cncli"})," for the latest tag name and adjust the command below. For the time of writing this, it's v3.1.4"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"git checkout <latest_tag_name>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"# This will take some time on a Raspberry Pi - be patient, it'll git r dun.\n# Grab some coffee, check the strawberries, whatever.\n\ncargo install --path . --force\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Check if the installation was successful and locate ",(0,s.jsx)(n.code,{children:"cncli"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cncli --version\n\ncommand -v cncli\n\necho $PATH\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"command -v"})," should show you where the ",(0,s.jsx)(n.code,{children:"cncli"})," executable currently lives, ",(0,s.jsx)(n.code,{children:".cargo/bin"}),". The ",(0,s.jsx)(n.code,{children:"echo"})," command will show what's on your ",(0,s.jsx)(n.code,{children:"PATH"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You should have ",(0,s.jsx)(n.code,{children:".local/bin"})," on your ",(0,s.jsx)(n.code,{children:"PATH"}),", but in case you don't (Core should have it), do it now and add it to your ",(0,s.jsx)(n.code,{children:"PATH"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Monitor"',children:'mkdir -p $HOME/.local/bin\necho PATH="$HOME/.local/bin:$PATH" >> $HOME/.bashrc\nsource $HOME/.bashrc\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Move ",(0,s.jsx)(n.code,{children:"cncli"})," from it's current location to ",(0,s.jsx)(n.code,{children:".local/bin"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"mv <path/to>/cncli $HOME/.local/bin/cncli\n"})}),"\n",(0,s.jsx)(n.h2,{id:"run-cncli-sync-and-deploy-it-as-a-service",children:"Run cncli sync and deploy it as a service"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"CNCLI sync creates an sqlite3 database (cncli.db), and needs to be connected to your running core-node. The guide assumes you have followed the armada-alliance guide so far and use the same folder structure."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"mkdir -p $HOME/pi-pool/cncli\n\nsudo nano /etc/systemd/system/cncli-sync.service\n"})}),"\n",(0,s.jsx)(n.p,{children:"Paste the following, adjust ip and port, save and exit."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"Monitor",label:"Monitor",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"[Unit]\nDescription=CNCLI Sync\nAfter=multi-user.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nLimitNOFILE=131072\nExecStart=/home/ada/.local/bin/cncli sync --host <your_core_ip> --port <your_core_port> --db /home/ada/pi-pool/cncli/cncli.db\nKillSignal=SIGINT\nSuccessExitStatus=143\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=cncli-sync\n\n[Install]\nWantedBy=multi-user.target\n"})})}),(0,s.jsx)(r.A,{value:"Core",label:"Core",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"[Unit]\nDescription=CNCLI Sync\nAfter=multi-user.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nLimitNOFILE=131072\nExecStart=/home/ada/.local/bin/cncli sync --host 127.0.0.1 --port <cardano_node_port> --db $HOME/pi-pool/cncli/cncli.db\nKillSignal=SIGINT\nSuccessExitStatus=143\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=cncli-sync\n\n[Install]\nWantedBy=multi-user.target\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Enable the service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"sudo systemctl daemon-reload\n\nsudo systemctl enable cncli-sync.service\n\nsudo systemctl start cncli-sync.service\n"})}),"\n",(0,s.jsx)(n.p,{children:"Make the cncli.db writable (needed for the following script)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd $HOME/pi-pool/cncli\n\nsudo chmod a+w cncli.db\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"create-the-leaderlog-stake-snapshot-v4sh-script-thanks-to-sayshar",children:["Create the leaderlog-stake-snapshot-v4.sh script (thanks to ",(0,s.jsx)(n.a,{href:"https://github.com/sayshar",children:"@sayshar"}),")"]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"Monitor",label:"Monitor",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"    mkdir -p $HOME/pi-pool/scripts\n    sudo nano $HOME/pi-pool/scripts/leaderlog-stake-snapshot-v4.sh\n"})})}),(0,s.jsx)(r.A,{value:"Core",label:"Core",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"    sudo nano $HOME/pi-pool/scripts/leaderlog-stake-snapshot-v4.sh\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Paste the following, adjust parameters, save and exit."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"Monitor",label:"Monitor",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:'#!/bin/bash\n\n##############################################################\n###################   To be filled  ##########################\n##############################################################\n\nPOOLID="type pool ID"\n\nVRFSKEY=$HOME/pi-pool/cncli/vrf.skey\n\nBYRON=$HOME/pi-pool/cncli/mainnet-byron-genesis.json\n\nSHELLEY=$HOME/pi-pool/cncli/mainnet-shelley-genesis.json\n\nCNCLIDB=$HOME/pi-pool/cncli/cncli.db #Ensure you point to the correct folder after running cncli sync.\n\nTZ="America/Los_Angeles" #https://en.wikipedia.org/wiki/List_of_tz_database_time_zones [default: America/Los_Angeles].\n\nEPOCH="current" #prev or next for last and next epoch respectively. Default is current.\n\n##############################################################\n\n\nif [ "$EPOCH" = "current" ] || [ "$EPOCH" = "prev" ] || [ "$EPOCH" = "next" ]; then\n    if [ "$EPOCH" = "current" ]; then\n               echo ""\n                echo "Please be patient. Generating leaderlogs for the current epoch."\n            echo ""\n        POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeSet/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeSet/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "next" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the next epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeMark/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeMark/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "prev" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the previous epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeGo/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeGo/ {print $NF+0}\'`\n    fi\n    cncli leaderlog --pool-id $POOLID --pool-vrf-skey $VRFSKEY --byron-genesis $BYRON --shelley-genesis $SHELLEY --pool-stake $POOLSTAKE --active-stake $ACTIVESTAKE --db $CNCLIDB --tz $TZ --ledger-set $EPOCH > slot.json\nelse\n        echo ""\n          echo "Invalid EPOCH entry"\n        echo ""\nfi\n\nif [ -f ./slot.json ]; then\n    epoch=`cat slot.json | awk \'$1 ~ /"epoch":/ {print $NF+0}\'`\n    mv slot.json slot_$epoch.json\n    echo ""\n    echo "Previewing leaderlogs slots for epoch $epoch"\n    echo ""\n    cat slot_$epoch.json\n    echo ""    \n    if [ -f ./slot_.json ]; then\n        rm slot_.json\n    fi\n    else\n    echo ""\n    echo "Leaderlogs could not be generated. Please check parameters and try again. Also ensure system has adequate RAM if failure repeats."\n    echo ""\nfi\n'})})}),(0,s.jsx)(r.A,{value:"Core",label:"Core",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:'#!/bin/bash\n\n##############################################################\n###################   To be filled  ##########################\n##############################################################\n\nPOOLID="type pool ID"\n\nVRFSKEY=$HOME/pi-pool/vrf.skey\n\nBYRON=$HOME/pi-pool/files/mainnet-byron-genesis.json\n\nSHELLEY=$HOME/pi-pool/files/mainnet-shelley-genesis.json\n\nCNCLIDB=$HOME/pi-pool/cncli/cncli.db #Ensure you point to the correct folder after running cncli sync.\n\nTZ="America/Los_Angeles" #https://en.wikipedia.org/wiki/List_of_tz_database_time_zones [default: America/Los_Angeles].\n\nEPOCH="current" #prev or next for last and next epoch respectively. Default is current.\n\n##############################################################\n\nif [ ! -f stake-snapshot.json ];then\n    cardano-cli query stake-snapshot --stake-pool-id $POOLID --mainnet > stake-snapshot.json\n    echo ""\n    cat stake-snapshot.json\n    echo ""\nelse\n    ANS="N"\n    echo ""\n    echo "The file stake-snapshot.json is detected. Would you like to recreate it? y/N"\n    echo ""\n    read ANS\nfi\n\nif [ $ANS = "y" ] || [ $ANS = "Y" ]; then\n    echo ""\n        echo "Generating new stake-snapshot.json."\n        echo ""\n        cardano-cli query stake-snapshot --stake-pool-id $POOLID --mainnet > stake-snapshot.json\n    echo ""\n    echo "Previewing stake-snapshot.json"\n    echo ""\n        cat stake-snapshot.json\n    echo ""\nelse\n        echo ""\n        echo "Previewing stake-snapshot.json"\n    echo ""\n    cat stake-snapshot.json\n    echo ""\nfi\n\nif [ "$EPOCH" = "current" ] || [ "$EPOCH" = "prev" ] || [ "$EPOCH" = "next" ]; then\n    if [ "$EPOCH" = "current" ]; then\n               echo ""\n                echo "Please be patient. Generating leaderlogs for the current epoch."\n            echo ""\n        POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeSet/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeSet/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "next" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the next epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeMark/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeMark/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "prev" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the previous epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeGo/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeGo/ {print $NF+0}\'`\n    fi\n    cncli leaderlog --pool-id $POOLID --pool-vrf-skey $VRFSKEY --byron-genesis $BYRON --shelley-genesis $SHELLEY --pool-stake $POOLSTAKE --active-stake $ACTIVESTAKE --db $CNCLIDB --tz $TZ --ledger-set $EPOCH > slot.json\nelse\n        echo ""\n          echo "Invalid EPOCH entry"\n        echo ""\nfi\n\nif [ -f ./slot.json ]; then\n    epoch=`cat slot.json | awk \'$1 ~ /"epoch":/ {print $NF+0}\'`\n    mv slot.json slot_$epoch.json\n    echo ""\n    echo "Previewing leaderlogs slots for epoch $epoch"\n    echo ""\n    cat slot_$epoch.json\n    echo ""    \n    if [ -f ./slot_.json ]; then\n        rm slot_.json\n    fi\n    else\n    echo ""\n    echo "Leaderlogs could not be generated. Please check parameters and try again. Also ensure system has adequate RAM if failure repeats."\n    echo ""\nfi\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Make it executable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"sudo chmod +x leaderlog-stake-snapshot-v4.sh\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:'If you installed cncli on your Core continue with "Run leaderlog script", otherwise you have to do some more steps.'})}),"\n",(0,s.jsx)(n.p,{children:"Run the following command on your Core. Make sure to add your pool id."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Core"',children:"cardano-cli query stake-snapshot --stake-pool-id <your_pool_id> --mainnet > stake-snapshot.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then copy ",(0,s.jsx)(n.code,{children:"vrf.skey"}),", ",(0,s.jsx)(n.code,{children:"mainnet-byron-genesis.json"}),", ",(0,s.jsx)(n.code,{children:"mainnet-shelley-genesis.json"})," ",(0,s.jsx)(n.code,{children:"stake-snapshot.json"})," from your Core to your cncli device. (via USB-stick, scp or rsync...) Move them to the right directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Monitor"',children:"mv /path/to/vrf.skey $HOME/pi-pool/cncli/vrf.skey\nmv /path/to/mainnet-byron-genesis.json $HOME/pi-pool/cncli/mainnet-byron-genesis.json\nmv /path/to/mainnet-shelley-genesis.json $HOME/pi-pool/cncli/mainnet-shelley-genesis.json\nmv /path/to/stake-snapshot.json $HOME/pi-pool/scripts/stake-snapshot.json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"run-leaderlog-script",children:"Run leaderlog script"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Every time you run the script you need a fresh stake-snapshot.json, except your stake didn't change for the last few epochs."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd $HOME/pi-pool/scripts\n./leaderlog-stake-snapshot-v4.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The schedule is saved to slot_",(0,s.jsx)(n.code,{children:"number-of-epoch"}),".json."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:'The script calculates the schedule for the current epoch by default. You can run it for the next epoch 1.5 days before. (Or at 70% into the current epoch.) Just change the epoch parameter in the script from "current" to "next".'})}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsx)(n.p,{children:"Be careful to keep your block leader schedule private, as attackers could use this information to strategically attack your pool."})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var s=t(8215);const a={tabItem:"tabItem_Ymn6"};var o=t(4848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,r),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>v});var s=t(6540),a=t(8215),o=t(3104),r=t(6347),l=t(205),i=t(7485),c=t(1682),d=t(679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=u(e),[r,i]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o}))),[c,h]=m({queryString:t,groupId:a}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,d.Dv)(t);return[a,(0,s.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),b=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{b&&i(b)}),[b]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),f(e)}),[h,f,o]),tabValues:o}}var f=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(4848);function y(e){let{className:n,block:t,selectedValue:s,selectValue:r,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,t=i.indexOf(n),a=l[t].value;a!==s&&(c(n),r(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>i.push(e),onKeyDown:h,onClick:d,...o,className:(0,a.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function k(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,j.jsx)(y,{...n,...e}),(0,j.jsx)(x,{...n,...e})]})}function v(e){const n=(0,f.A)();return(0,j.jsx)(k,{...e,children:h(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);