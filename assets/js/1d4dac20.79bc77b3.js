"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[2996],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6121:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},s="Setup guide for Ogmios proxied through Nginx with basic auth without TLS",o={unversionedId:"stake-pool-guides/ogmios",id:"stake-pool-guides/ogmios",title:"Setup guide for Ogmios proxied through Nginx with basic auth without TLS",description:"This guide is not going to cover Nginx with TLS. Be aware that sending the basic auth username and password to Nginx will be clear text over the wire. For TLS with certbot and Nginx you will need a DNS name. This is a simple protection to prevent abuse. Use a simple password and know it can be read by 5 eyes.",source:"@site/docs/stake-pool-guides/ogmios.md",sourceDirName:"stake-pool-guides",slug:"/stake-pool-guides/ogmios",permalink:"/docs/stake-pool-guides/ogmios",draft:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/stake-pool-guides/ogmios.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Make sure ~/.local/bin exists and grab the binary.",id:"make-sure-localbin-exists-and-grab-the-binary",level:3},{value:"Confirm Ogmios is in PATH",id:"confirm-ogmios-is-in-path",level:2},{value:"Create startup script &amp; systemd unit file",id:"create-startup-script--systemd-unit-file",level:3},{value:"Create the systemd unit file.",id:"create-the-systemd-unit-file",level:2},{value:"Install Nginx &amp; apache-utils",id:"install-nginx--apache-utils",level:2},{value:"Create Basic Authentication File",id:"create-basic-authentication-file",level:3},{value:"Create Nginx server block",id:"create-nginx-server-block",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setup-guide-for-ogmios-proxied-through-nginx-with-basic-auth-without-tls"},"Setup guide for Ogmios proxied through Nginx with basic auth without TLS"),(0,r.kt)("admonition",{title:"Basic auth without TLS",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This guide is not going to cover Nginx with TLS. Be aware that sending the basic auth username and password to Nginx will be clear text over the wire. For TLS with certbot and Nginx you will need a DNS name. This is a simple protection to prevent abuse. Use a simple password and know it can be read by 5 eyes.")),(0,r.kt)("p",null,"Grab the latest Ogmios binary here for your systems architecture."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/CardanoSolutions/ogmios/releases"},"Ogmios latest release")),(0,r.kt)("p",null,"Put it somewhere in system PATH. I use ~/.local/bin but you can put the binary in the same folder you keep cardano-node binary. This is what I'll use in this guide. Update accordingly."),(0,r.kt)("h3",{id:"make-sure-localbin-exists-and-grab-the-binary"},"Make sure ~/.local/bin exists and grab the binary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir ~/.local/bin\nmkdir ~/tmp\ncd ~/tmp\n\n# Replace URL with current release/architecture link.\nwget https://github.com/CardanoSolutions/ogmios/releases/download/v6.3.0/ogmios-v6.3.0-aarch64-linux.zip\nunzip ogmios-*\nmv ~/tmp/ogmios/bin/ogmios ~/.local/bin\nchmod +x ~/.local/bin/ogmios\n")),(0,r.kt)("p",null,"Add ~/.local/bin to the users PATH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'cd ~/.local/bin; echo "export PATH=\\"$PWD:\\$PATH\\"" >> $HOME/.bashrc\nsource ~/.bashrc\n')),(0,r.kt)("h2",{id:"confirm-ogmios-is-in-path"},"Confirm Ogmios is in PATH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"ogmios version\n")),(0,r.kt)("h3",{id:"create-startup-script--systemd-unit-file"},"Create startup script & systemd unit file"),(0,r.kt)("p",null,"Create a startup script for Ogmios edit below to correct socket and config.json locations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nano ${HOME}/.local/bin/ogmios-service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"#!/bin/bash\nogmios --host 127.0.0.1 --node-socket <path to cardano node socket> --node-config <path to cardano node config.json>\n")),(0,r.kt)("p",null,"Make it executable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"chmod +x ${HOME}/.local/bin/ogmios-service\n\n")),(0,r.kt)("p",null,"Test it. ctrl+c to exit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"${HOME}/.local/bin/ogmios-service\n\n")),(0,r.kt)("h2",{id:"create-the-systemd-unit-file"},"Create the systemd unit file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'sudo tee /etc/systemd/system/ogmios.service <<EOF\n# Ogmios Service\n[Unit]\nDescription=Ogmios Service\nAfter=network.target\n\n[Service]\nUser=${USER}\nExecStart=/bin/bash -c "PATH=${HOME}/.local/bin:\\$PATH exec ${HOME}/.local/bin/ogmios-service"\nRestart=always\nRestartSec=10\nLimitNOFILE=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n')),(0,r.kt)("p",null,"Start the service, confirm its running."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl start daemon-reload\nsudo systemctl start ogmios.service\njournalctl -u ogmios.service -f\n")),(0,r.kt)("p",null,"If everything looks good enable start at boot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo systemctl enable ogmios.service\n")),(0,r.kt)("h2",{id:"install-nginx--apache-utils"},"Install Nginx & apache-utils"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install nginx\nsudo apt install apache2-utils\n")),(0,r.kt)("h3",{id:"create-basic-authentication-file"},"Create Basic Authentication File"),(0,r.kt)("p",null,"Create a basic authentication file to secure access to the Ogmios server. Be sure to edit the username."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo htpasswd -c /etc/nginx/.ogmios <username>\nsudo chmod 640 /etc/nginx/.ogmios\n")),(0,r.kt)("h3",{id:"create-nginx-server-block"},"Create Nginx server block"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'sudo tee /etc/nginx/sites-available/ogmios > /dev/null <<EOF\nserver {\n    listen 80 default_server;  # Listen on port 80 and make this the default server\n\n    access_log /var/log/nginx/ogmios.access.log;\n    error_log /var/log/nginx/ogmios.online.error.log;\n\n    add_header X-Proxy-Cache \\$upstream_cache_status;\n\n    location / {\n        auth_basic "You Shall Not Pass";\n        auth_basic_user_file /etc/nginx/.ogmios;\n        proxy_pass http://127.0.0.1:1337;\n        proxy_redirect off;\n        include proxy_params;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\nEOF\n\n')),(0,r.kt)("p",null,"Link it to sites enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo ln -s /etc/nginx/sites-available/ogmios /etc/nginx/sites-enabled/\n")),(0,r.kt)("p",null,"Ensure Nginx is happy with it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo nginx -t\n")),(0,r.kt)("p",null,"If everything is ok.."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo service nginx restart\n")),(0,r.kt)("p",null,"Ensure port 80 is open in your firewall. You should then be able to enter the servers public IP in your browser."))}d.isMDXComponent=!0}}]);