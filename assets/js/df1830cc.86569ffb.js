"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[7649],{8784:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=t(4848),s=t(8453);const i={},r="Cardano NFT Collection Tutorial \ud83d\udc5b",o={id:"cardano-developer-guides/cardano-nft-collection-tutorial-coming-soon",title:"Cardano NFT Collection Tutorial \ud83d\udc5b",description:"THIS GUIDE IS DEPRECATED",source:"@site/docs/cardano-developer-guides/cardano-nft-collection-tutorial-coming-soon.md",sourceDirName:"cardano-developer-guides",slug:"/cardano-developer-guides/cardano-nft-collection-tutorial-coming-soon",permalink:"/docs/cardano-developer-guides/cardano-nft-collection-tutorial-coming-soon",draft:!1,unlisted:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/cardano-developer-guides/cardano-nft-collection-tutorial-coming-soon.md",tags:[],version:"current",frontMatter:{}},c={},l=[{value:"THIS GUIDE IS DEPRECATED",id:"this-guide-is-deprecated",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Clone the cardano-minter repo if you haven&#39;t already...",id:"clone-the-cardano-minter-repo-if-you-havent-already",level:3},{value:"Install additional dependencies",id:"install-additional-dependencies",level:3},{value:"Now, let&#39;s start with the tutorial \ud83d\ude0a",id:"now-lets-start-with-the-tutorial-",level:2},{value:"1. Create our initial assets",id:"1-create-our-initial-assets",level:3},{value:"2. Download random images for testing",id:"2-download-random-images-for-testing",level:3},{value:"3. Extend metadata.json with thumbnails (optional)",id:"3-extend-metadatajson-with-thumbnails-optional",level:3},{value:"4. Create our pinata.cloud account to get our API keys",id:"4-create-our-pinatacloud-account-to-get-our-api-keys",level:3},{value:"5. Need to safely store our API keys",id:"5-need-to-safely-store-our-api-keys",level:3},{value:"6. Upload and pin our data to IPFS",id:"6-upload-and-pin-our-data-to-ipfs",level:3},{value:"Before you continue to the minting process, please understand the importance of minting policies and their scripts!",id:"before-you-continue-to-the-minting-process-please-understand-the-importance-of-minting-policies-and-their-scripts",level:4},{value:"7. Create an &quot;open&quot; or &quot;unlocked&quot; minting policy and script (Optional)",id:"7-create-an-open-or-unlocked-minting-policy-and-script-optional",level:3},{value:"8. Create a &quot;time-locked&quot; minting policy and script (Recommended)",id:"8-create-a-time-locked-minting-policy-and-script-recommended",level:3},{value:"9. Create a script to get our policy ID",id:"9-create-a-script-to-get-our-policy-id",level:3},{value:"9. Define the mint transaction",id:"9-define-the-mint-transaction",level:3},{value:"10. Send assets back to wallet",id:"10-send-assets-back-to-wallet",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"cardano-nft-collection-tutorial-",children:"Cardano NFT Collection Tutorial \ud83d\udc5b"}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsx)(e.h3,{id:"this-guide-is-deprecated",children:"THIS GUIDE IS DEPRECATED"})}),"\n",(0,a.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["cardano-node / cardano-cli set up on local machine (",(0,a.jsx)(e.a,{href:"https://docs.cardano.org/projects/cardano-node/en/latest",children:"https://docs.cardano.org/projects/cardano-node/en/latest"}),")"]}),"\n",(0,a.jsx)(e.li,{children:"Node.js installed version 14"}),"\n",(0,a.jsx)(e.li,{children:"cardano-cli-js package installed"}),"\n",(0,a.jsx)(e.li,{children:"cardano-minter repo from the previous tutorial"}),"\n"]}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"If you haven't already, please watch our video from the previous NFT tutorial \ud83d\ude0e"})})}),"\n",(0,a.jsxs)(e.p,{children:['{% embed url="',(0,a.jsx)(e.a,{href:"https://youtu.be/OeOliguGn7Y",children:"https://youtu.be/OeOliguGn7Y"}),'" %}']}),"\n",(0,a.jsx)(e.h3,{id:"clone-the-cardano-minter-repo-if-you-havent-already",children:"Clone the cardano-minter repo if you haven't already..."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"git clone https://github.com/armada-alliance/cardano-minter\ncd cardano-minter\n"})}),"\n",(0,a.jsx)(e.h3,{id:"install-additional-dependencies",children:"Install additional dependencies"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"npm install form-data dotenv axios lodash sharp promise-parallel-throttle --save\n"})}),"\n",(0,a.jsx)(e.h2,{id:"now-lets-start-with-the-tutorial-",children:"Now, let's start with the tutorial \ud83d\ude0a"}),"\n",(0,a.jsx)(e.h3,{id:"1-create-our-initial-assets",children:"1. Create our initial assets"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:'While in the "cardano-minter" directory create a script that will generate our assets in a nicely formatted JSON file called "assets.json".'}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"nano create-initial-assets-json.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'/**\n * This script is responsible for generating the initial\n * assets.json that can later be adjusted to fit your specific needs\n *\n * You can define:\n * 1. amount of assets\n * 2. whether you want to start the collection with either 1 or 0\n * 3. what the mimeType is (jpeg, png or gif)\n */\n\nconst times = require(\'lodash/times\')\nconst fs = require("fs").promises\n\nconst AMOUNT_OF_ASSETS = 15\nconst START_WITH_ZERO = true\nconst MIME_TYPE = \'image/png\'\n\nasync function main() {\n\n    const assets = times(AMOUNT_OF_ASSETS).map(i => {\n\n        const number = START_WITH_ZERO ? i : i + 1\n        const id = `PIADA${number}` // PIADA0\n\n        const [extension] = MIME_TYPE.split("/").reverse() // png\n\n        return {\n            id,\n            name: `PIADA #${number}`,\n            // description: "", \n            image: `images/${id}_thumbnail.${extension}`, // images/PIADA0_thumbnail.png\n            src: `images/${id}.${extension}`, // images/PIADA0.png\n            type: MIME_TYPE,\n            // add whatever like below\n            authors: ["PIADA", "SBLYR"],\n            website: "https://ada-pi.io"\n        }\n    })\n\n    await fs.writeFile(__dirname + \'/assets.json\', JSON.stringify(assets, null, 2))\n}\n\nmain()\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"node src/create-initial-assets-json.js\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Your assets.json file should look like ",(0,a.jsx)(e.a,{href:"https://github.com/armada-alliance/cardano-minter-collection/blob/master/src/assets.json",children:"this"}),"."]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"2-download-random-images-for-testing",children:"2. Download random images for testing"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Make a folder called images to download the test images into"}),"\n",(0,a.jsx)(e.li,{children:"Create a script that will go and grab the images from the internet and download them into the images folder"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"cd src\nnano download-test-images.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"/**\n * This script expect the assets.json to exist\n * inside the src directory there should be a reference\n * to a filepath on the local file system relative to the `src` dir\n */\n\nconst random = require('lodash/random')\nconst axios = require('axios')\nconst fs = require('fs').promises\n\nconst assets = require(\"./assets.json\")\n\nasync function main() {\n\n    await Promise.all(\n        assets.map(async asset => {\n\n            const { data } = await axios.get(`https://source.unsplash.com/640x400?cat&v=${random()}`, { responseType: 'arraybuffer' })\n            console.log(`[${asset.name}] downloaded random cat image`)\n\n            await fs.writeFile(__dirname + '/' + asset.src, data)\n            console.log(`[${asset.name}] image saved to \"${asset.src}\"`)\n        })\n    )\n}\n\nmain()\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"node src/download-test-images.js\n"})}),"\n",(0,a.jsx)(e.h3,{id:"3-extend-metadatajson-with-thumbnails-optional",children:"3. Extend metadata.json with thumbnails (optional)"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["generate thumbnails based on images from the metadata.json and give them the same name with ",(0,a.jsx)(e.code,{children:"_thumbnail"})," tag added to the name"]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"cd src\nnano generate-thumbnails.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const fs = require('fs').promises\nconst sharp = require(\"sharp\")\n\nconst generateThumbnail = (filePath, data) => new Promise(resolve => {\n\n    sharp(data)\n        .resize(300) // 640x400 (640 -> 200)  \n        .toFile(filePath, resolve)\n})\n\nconst assets = require('./assets.json')\n\nasync function main() {\n\n    await Promise.all(\n        assets.map(async asset => {\n\n            const data = await fs.readFile(__dirname + '/' + asset.src)\n\n            await generateThumbnail(__dirname + \"/\" + asset.image, data)\n            console.log(`[${asset.name}] thumbnail generated at \"${asset.image}\"`)\n        })\n    )\n}\n\nmain()\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"node src/generate-thumbnails.js\n"})}),"\n",(0,a.jsxs)(e.h3,{id:"4-create-our-pinatacloud-account-to-get-our-api-keys",children:["4. Create our ",(0,a.jsx)(e.a,{href:"https://pinata.cloud",children:"pinata.cloud"})," account to get our API keys"]}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Create an account"}),"\n",(0,a.jsx)(e.li,{children:"Create API keys"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"5-need-to-safely-store-our-api-keys",children:"5. Need to safely store our API keys"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"create .env file and paste in our keys"}),"\n"]}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["Make sure the ",(0,a.jsx)(e.strong,{children:".env"})," file is in the ",(0,a.jsx)(e.strong,{children:"cardano-minter"})," directory but ",(0,a.jsx)(e.strong,{children:"not in"})," ",(0,a.jsx)(e.strong,{children:"the"})," ",(0,a.jsx)(e.strong,{children:"src"})," folder"]})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"nano .env\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"PINATA_API_KEY='Enter Your API Key'\nPINATA_API_SECRET='Enter Your API Secret Key'\n"})}),"\n",(0,a.jsx)(e.h3,{id:"6-upload-and-pin-our-data-to-ipfs",children:"6. Upload and pin our data to IPFS"}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["Read ",(0,a.jsx)(e.a,{href:"https://docs.ipfs.io/how-to/pin-files/#three-kinds-of-pins",children:"this article "}),"to learn more about why we want to Pin our NFTs to IPFS."]})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.strong,{children:'First, we need to make a script called pin-to-ipfs.js, this script will "upload" and Pin our images to IPFS using the pinata.cloud API.'})}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"nano pin-to-ipfs.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const dotenv = require('dotenv')\ndotenv.config()\nconst axios = require(\"axios\")\nconst FormData = require('form-data')\nconst fs = require('fs')\n\nconst pinata = axios.create({\n    baseURL: 'https://api.pinata.cloud',\n    headers: {\n        pinata_api_key: process.env.PINATA_API_KEY,\n        pinata_secret_api_key: process.env.PINATA_API_SECRET\n    }\n})\n\nmodule.exports = async (name, filePath) => {\n\n    let data = new FormData()\n    data.append('file', fs.createReadStream(filePath))\n\n    const metadata = JSON.stringify({\n        name\n    })\n\n    data.append('pinataMetaData', metadata)\n\n    const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n            regions: [\n                {\n                    id: 'FRA1',\n                    desiredReplicationCount: 1\n                },\n                {\n                    id: 'NYC1',\n                    desiredReplicationCount: 1\n                }\n            ]\n        }\n    })\n\n    data.append('pinataOptions', pinataOptions)\n\n    const response = await pinata.post('/pinning/pinFileToIPFS', data, {\n        maxBodyLength: 'Infinity', // this is needed to prevent axios from erroring out with large files\n        headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`\n        }\n    }).catch(e => {\n\n        if (e.response) {\n            console.log(e.response.error)\n        } else {\n            console.log(e.message)\n        }\n    })\n\n    const hash = response.data.IpfsHash\n\n    return {\n        hash,\n        ipfsLink: `ipfs://${hash}`,\n        httpLink: `https://ipfs.io/ipfs/${hash}`\n    }\n}\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd ..\nnode src/pin-to-ipfs.js\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:'Next, we can create a script called pin-images-to-ipfs.js, this will run through our images/assets and "pin" the images to IPFS using our local node.'}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd src\nnano pin-images-to-ipfs.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const fs = require("fs").promises\nconst pinToIpfs = require("./pin-to-ipfs")\nconst Throttle = require("promise-parallel-throttle")\n\nconst assets = require("./assets.json")\n\nasync function main() {\n\n    const updated_assets = await Throttle.sync(\n        assets.map(asset => async () => {\n\n            const { ipfsLink: image, httpLink: imageLink } = await pinToIpfs(`${asset.id}_image`, __dirname + "/" + asset.image)\n            console.log(`[${asset.name}] pinned image to ipfs (${imageLink})`)\n\n            const { ipfsLink: src, httpLink: srcLink } = await pinToIpfs(`${asset.id}_src`, __dirname + "/" + asset.src)\n            console.log(`[${asset.name}] pinned image to ipfs (${srcLink})`)\n\n            return {\n                ...asset,\n                image,\n                src\n            }\n        })\n    )\n\n    // write updated assets to assets.json\n    await fs.writeFile(__dirname + \'/assets.json\', JSON.stringify(updated_assets, null, 2))\n\n    console.log(\'written updates to assets.json\')\n}\n\nmain()\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"node src/pin-images-to-ipfs.js\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"caution",children:(0,a.jsx)(e.h4,{id:"before-you-continue-to-the-minting-process-please-understand-the-importance-of-minting-policies-and-their-scripts",children:"Before you continue to the minting process, please understand the importance of minting policies and their scripts!"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:'Read the Cardano Documentation on "'}),(0,a.jsx)(e.a,{href:"https://docs.cardano.org/projects/cardano-node/en/latest/reference/simple-scripts.html#Step-1---construct-the-tx-body",children:(0,a.jsx)(e.strong,{children:"Scripts"})}),(0,a.jsx)(e.strong,{children:'" and/or watch a video we made discussing the subject:'})]}),"\n",(0,a.jsxs)(e.p,{children:['{% embed url="',(0,a.jsx)(e.a,{href:"https://youtu.be/v6q66zcFqew",children:"https://youtu.be/v6q66zcFqew"}),'" %}']}),"\n",(0,a.jsx)(e.h3,{id:"7-create-an-open-or-unlocked-minting-policy-and-script-optional",children:'7. Create an "open" or "unlocked" minting policy and script (Optional)'}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"We will create an open minting policy script and export it in JSON and TXT format."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd src\nnano create-mint-policy.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const fs = require("fs")\nconst cardano = require("./cardano")\n\nconst wallet = cardano.wallet("PIADA")\n\nconst mintScript = {\n    keyHash: cardano.addressKeyHash(wallet.name),\n    type: "sig"\n}\n\nfs.writeFileSync(__dirname + "/mint-policy.json", JSON.stringify(mintScript, null, 2))\nfs.writeFileSync(__dirname + "/mint-policy-id.txt", cardano.transactionPolicyid(mintScript))\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"node src/create-mint-policy.js\n"})}),"\n",(0,a.jsx)(e.h3,{id:"8-create-a-time-locked-minting-policy-and-script-recommended",children:'8. Create a "time-locked" minting policy and script (Recommended)'}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:'Create a "time-locked" minting policy script and export it in JSON and TXT format.'}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"cd src\nnano create-time-locked-mint-policy.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const fs = require("fs")\nconst cardano = require("./cardano")\n\nconst wallet = cardano.wallet("PIADA")\n\nconst { slot } = cardano.queryTip()\n\nconst SLOTS_PER_EPOCH = 5 * 24 * 60 * 60 // 432000\n\nconst mintScript = {\n    type: "all",\n    scripts: [\n        {\n            slot: slot + (SLOTS_PER_EPOCH * 5),\n            type: "before"\n        },\n        {\n            keyHash: cardano.addressKeyHash(wallet.name),\n            type: "sig"\n        }\n    ]\n}\n\nfs.writeFileSync(__dirname + "/mint-policy.json", JSON.stringify(mintScript, null, 2))\nfs.writeFileSync(__dirname + "/mint-policy-id.txt", cardano.transactionPolicyid(mintScript))\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"node src/create-time-locked-mint-policy.js\n"})}),"\n",(0,a.jsx)(e.h3,{id:"9-create-a-script-to-get-our-policy-id",children:"9. Create a script to get our policy ID"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"We want to make a script that can get our Policy ID to be used in other parts of our program"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd src\nnano get-policy-id.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const cardano = require("./cardano")\nconst mintScript = require("./mint-policy.json")\n\nmodule.exports = () => {\n\n    const policyId = cardano.transactionPolicyid(mintScript)\n\n    return {\n        policyId,\n        mintScript\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"node src/get-policy-id.js\n"})}),"\n",(0,a.jsx)(e.h3,{id:"9-define-the-mint-transaction",children:"9. Define the mint transaction"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"build mint transaction with metadata.json"}),"\n",(0,a.jsx)(e.li,{children:"calc fee"}),"\n",(0,a.jsx)(e.li,{children:"rebuild"}),"\n",(0,a.jsx)(e.li,{children:"sign"}),"\n",(0,a.jsx)(e.li,{children:"submit"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd src\nnano mint-multiple-assets.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const cardano = require("./cardano")\nconst getPolicyId = require("./get-policy-id")\nconst assets = require("./assets.json")\n\nconst wallet = cardano.wallet("PIADA")\n\nconst { policyId: POLICY_ID, mintScript } = getPolicyId()\n\nconst metadata_assets = assets.reduce((result, asset) => {\n\n    const ASSET_ID = asset.id // PIADA0\n\n    // remove id property from the asset metadata\n    const asset_metadata = {\n        ...asset\n    }\n\n    delete asset_metadata.id\n\n    return {\n        ...result,\n        [ASSET_ID]: asset_metadata\n    }\n}, {})\n\nconst metadata = {\n    721: {\n        [POLICY_ID]: {\n            ...metadata_assets\n        }\n    }\n}\n\nconst txOut_value = assets.reduce((result, asset) => {\n\n    const ASSET_ID = POLICY_ID + "." + asset.id\n    result[ASSET_ID] = 1\n    return result\n\n}, {\n    ...wallet.balance().value\n})\n\nconst mint_actions = assets.map(asset => ({ action: "mint", amount: 1, token: POLICY_ID + "." + asset.id }))\n\nconst tx = {\n    txIn: wallet.balance().utxo,\n    txOut: [\n        {\n            address: wallet.paymentAddr,\n            amount: txOut_value\n        }\n    ],\n     mint: {\n        actions: mint_actions,\n        script: [mintScript]\n    },\n    metadata,\n    witnessCount: 2\n}\n\nconst buildTransaction = (tx) => {\n\n    const raw = cardano.transactionBuildRaw(tx)\n    const fee = cardano.transactionCalculateMinFee({\n        ...tx,\n        txBody: raw\n    })\n\n    tx.txOut[0].value.lovelace -= fee\n\n    return cardano.transactionBuildRaw({ ...tx, fee })\n}\n\nconst raw = buildTransaction(tx)\n\n// 9. Sign transaction\n\nconst signTransaction = (wallet, tx, script) => {\n\n     return cardano.transactionSign({\n        signingKeys: [wallet.payment.skey, wallet.payment.skey],\n        txBody: tx\n    })\n}\n\nconst signed = signTransaction(wallet, raw, mintScript)\n\n// 10. Submit transaction\n\nconst txHash = cardano.transactionSubmit(signed)\n\nconsole.log(txHash)\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"node src/mint-multiple-assets.js\n"})}),"\n",(0,a.jsx)(e.h3,{id:"10-send-assets-back-to-wallet",children:"10. Send assets back to wallet"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Make a script to send multiple assets back to a wallet in a single transaction."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"cd src\nnano send-multiple-assets-back-to-wallet.js\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const cardano = require("./cardano")\nconst assets = require("./assets.json")\nconst getPolicyId = require(\'./get-policy-id\')\n\nconst sender = cardano.wallet("PIADA")\n\nconsole.log(\n    "Balance of Sender address" +\n    cardano.toAda(sender.balance().amount.lovelace) + " ADA"\n)\n\nconst { policyId: POLICY_ID } = getPolicyId()\n\nfunction sendAssets({ receiver, assets }) {\n\n    const txOut_amount_sender = assets.reduce((result, asset) => {\n\n        const ASSET_ID = POLICY_ID + "." + asset\n        delete result[ASSET_ID]\n        return result\n    }, {\n        ...sender.balance().amount\n    })\n\n    const txOut_amount_receiver = assets.reduce((result, asset) => {\n\n        const ASSET_ID = POLICY_ID + "." + asset\n        result[ASSET_ID] = 1\n        return result\n    }, {})\n\n    // This is depedent at the network, try to increase this amount of ADA\n    // if you get an error saying: OutputTooSmallUTxO\n    const MIN_ADA = 3\n\n    const txInfo = {\n        txIn: cardano.queryUtxo(sender.paymentAddr),\n        txOut: [\n            {\n                address: sender.paymentAddr,\n                amount: {\n                    ...txOut_amount_sender,\n                    lovelace: txOut_amount_sender.lovelace - cardano.toLovelace(MIN_ADA)\n                }\n            },\n            {\n                address: receiver,\n                amount: {\n                    lovelace: cardano.toLovelace(MIN_ADA),\n                    ...txOut_amount_receiver\n                }\n            }\n        ]\n    }\n\n    const raw = cardano.transactionBuildRaw(txInfo)\n\n    const fee = cardano.transactionCalculateMinFee({\n        ...txInfo,\n        txBody: raw,\n        witnessCount: 1\n    })\n\n    txInfo.txOut[0].amount.lovelace -= fee\n\n    const tx = cardano.transactionBuildRaw({ ...txInfo, fee })\n\n    const txSigned = cardano.transactionSign({\n        txBody: tx,\n        signingKeys: [sender.payment.skey]\n    })\n\n    const txHash = cardano.transactionSubmit(txSigned)\n\n    console.log(txHash)\n}\n\nsendAssets({\n    receiver: "addr1qylm539axczhyvdh90f6c09ptrz8asa4hgq8u5shkw3v9vjae9ftypmc8tmd2rrwngdxm4sr3tpzmxw4zyg3z7vttpwsl0alww",\n    assets: assets.map(asset => asset.id)\n})\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",metastring:'title=">_ Terminal"',children:"node src/send-multiple-assets-back-to-wallet.js\n"})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);